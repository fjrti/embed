
program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000015fa  0000166e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000129c  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000741  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 41 00 	call	0x82	; 0x82 <main>
      7a:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
void LCD_print (char*) ;


/******		MAIN FUNCTION		******/

int main (  ) {
      82:	df 93       	push	r29
      84:	cf 93       	push	r28
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	e9 97       	sbiw	r28, 0x39	; 57
      8c:	0f b6       	in	r0, 0x3f	; 63
      8e:	f8 94       	cli
      90:	de bf       	out	0x3e, r29	; 62
      92:	0f be       	out	0x3f, r0	; 63
      94:	cd bf       	out	0x3d, r28	; 61

    Initialization( ) ;                                                     // Initialize LCD
      96:	0e 94 33 02 	call	0x466	; 0x466 <Initialization>
    LCD_print( "Press key" ) ;
      9a:	80 e6       	ldi	r24, 0x60	; 96
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
      a2:	80 e0       	ldi	r24, 0x00	; 0
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	a0 e2       	ldi	r26, 0x20	; 32
      a8:	b1 e4       	ldi	r27, 0x41	; 65
      aa:	8d ab       	std	Y+53, r24	; 0x35
      ac:	9e ab       	std	Y+54, r25	; 0x36
      ae:	af ab       	std	Y+55, r26	; 0x37
      b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      b2:	6d a9       	ldd	r22, Y+53	; 0x35
      b4:	7e a9       	ldd	r23, Y+54	; 0x36
      b6:	8f a9       	ldd	r24, Y+55	; 0x37
      b8:	98 ad       	ldd	r25, Y+56	; 0x38
      ba:	20 e0       	ldi	r18, 0x00	; 0
      bc:	30 e0       	ldi	r19, 0x00	; 0
      be:	4a e7       	ldi	r20, 0x7A	; 122
      c0:	53 e4       	ldi	r21, 0x43	; 67
      c2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
      c6:	dc 01       	movw	r26, r24
      c8:	cb 01       	movw	r24, r22
      ca:	89 ab       	std	Y+49, r24	; 0x31
      cc:	9a ab       	std	Y+50, r25	; 0x32
      ce:	ab ab       	std	Y+51, r26	; 0x33
      d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
      d2:	69 a9       	ldd	r22, Y+49	; 0x31
      d4:	7a a9       	ldd	r23, Y+50	; 0x32
      d6:	8b a9       	ldd	r24, Y+51	; 0x33
      d8:	9c a9       	ldd	r25, Y+52	; 0x34
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e8       	ldi	r20, 0x80	; 128
      e0:	5f e3       	ldi	r21, 0x3F	; 63
      e2:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
      e6:	88 23       	and	r24, r24
      e8:	2c f4       	brge	.+10     	; 0xf4 <main+0x72>
		__ticks = 1;
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	98 ab       	std	Y+48, r25	; 0x30
      f0:	8f a7       	std	Y+47, r24	; 0x2f
      f2:	3f c0       	rjmp	.+126    	; 0x172 <main+0xf0>
	else if (__tmp > 65535)
      f4:	69 a9       	ldd	r22, Y+49	; 0x31
      f6:	7a a9       	ldd	r23, Y+50	; 0x32
      f8:	8b a9       	ldd	r24, Y+51	; 0x33
      fa:	9c a9       	ldd	r25, Y+52	; 0x34
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	3f ef       	ldi	r19, 0xFF	; 255
     100:	4f e7       	ldi	r20, 0x7F	; 127
     102:	57 e4       	ldi	r21, 0x47	; 71
     104:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     108:	18 16       	cp	r1, r24
     10a:	4c f5       	brge	.+82     	; 0x15e <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     10c:	6d a9       	ldd	r22, Y+53	; 0x35
     10e:	7e a9       	ldd	r23, Y+54	; 0x36
     110:	8f a9       	ldd	r24, Y+55	; 0x37
     112:	98 ad       	ldd	r25, Y+56	; 0x38
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	40 e2       	ldi	r20, 0x20	; 32
     11a:	51 e4       	ldi	r21, 0x41	; 65
     11c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     120:	dc 01       	movw	r26, r24
     122:	cb 01       	movw	r24, r22
     124:	bc 01       	movw	r22, r24
     126:	cd 01       	movw	r24, r26
     128:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     12c:	dc 01       	movw	r26, r24
     12e:	cb 01       	movw	r24, r22
     130:	98 ab       	std	Y+48, r25	; 0x30
     132:	8f a7       	std	Y+47, r24	; 0x2f
     134:	0f c0       	rjmp	.+30     	; 0x154 <main+0xd2>
     136:	89 e1       	ldi	r24, 0x19	; 25
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	9e a7       	std	Y+46, r25	; 0x2e
     13c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     13e:	8d a5       	ldd	r24, Y+45	; 0x2d
     140:	9e a5       	ldd	r25, Y+46	; 0x2e
     142:	01 97       	sbiw	r24, 0x01	; 1
     144:	f1 f7       	brne	.-4      	; 0x142 <main+0xc0>
     146:	9e a7       	std	Y+46, r25	; 0x2e
     148:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     14a:	8f a5       	ldd	r24, Y+47	; 0x2f
     14c:	98 a9       	ldd	r25, Y+48	; 0x30
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	98 ab       	std	Y+48, r25	; 0x30
     152:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     154:	8f a5       	ldd	r24, Y+47	; 0x2f
     156:	98 a9       	ldd	r25, Y+48	; 0x30
     158:	00 97       	sbiw	r24, 0x00	; 0
     15a:	69 f7       	brne	.-38     	; 0x136 <main+0xb4>
     15c:	14 c0       	rjmp	.+40     	; 0x186 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     15e:	69 a9       	ldd	r22, Y+49	; 0x31
     160:	7a a9       	ldd	r23, Y+50	; 0x32
     162:	8b a9       	ldd	r24, Y+51	; 0x33
     164:	9c a9       	ldd	r25, Y+52	; 0x34
     166:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     16a:	dc 01       	movw	r26, r24
     16c:	cb 01       	movw	r24, r22
     16e:	98 ab       	std	Y+48, r25	; 0x30
     170:	8f a7       	std	Y+47, r24	; 0x2f
     172:	8f a5       	ldd	r24, Y+47	; 0x2f
     174:	98 a9       	ldd	r25, Y+48	; 0x30
     176:	9c a7       	std	Y+44, r25	; 0x2c
     178:	8b a7       	std	Y+43, r24	; 0x2b
     17a:	8b a5       	ldd	r24, Y+43	; 0x2b
     17c:	9c a5       	ldd	r25, Y+44	; 0x2c
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	f1 f7       	brne	.-4      	; 0x17e <main+0xfc>
     182:	9c a7       	std	Y+44, r25	; 0x2c
     184:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms ( 10 ) ;

    LCD_command( 0x01 ) ;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_command>
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	a0 e0       	ldi	r26, 0x00	; 0
     192:	b0 e4       	ldi	r27, 0x40	; 64
     194:	8f a3       	std	Y+39, r24	; 0x27
     196:	98 a7       	std	Y+40, r25	; 0x28
     198:	a9 a7       	std	Y+41, r26	; 0x29
     19a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     19c:	6f a1       	ldd	r22, Y+39	; 0x27
     19e:	78 a5       	ldd	r23, Y+40	; 0x28
     1a0:	89 a5       	ldd	r24, Y+41	; 0x29
     1a2:	9a a5       	ldd	r25, Y+42	; 0x2a
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	4a e7       	ldi	r20, 0x7A	; 122
     1aa:	53 e4       	ldi	r21, 0x43	; 67
     1ac:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     1b0:	dc 01       	movw	r26, r24
     1b2:	cb 01       	movw	r24, r22
     1b4:	8b a3       	std	Y+35, r24	; 0x23
     1b6:	9c a3       	std	Y+36, r25	; 0x24
     1b8:	ad a3       	std	Y+37, r26	; 0x25
     1ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     1bc:	6b a1       	ldd	r22, Y+35	; 0x23
     1be:	7c a1       	ldd	r23, Y+36	; 0x24
     1c0:	8d a1       	ldd	r24, Y+37	; 0x25
     1c2:	9e a1       	ldd	r25, Y+38	; 0x26
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	40 e8       	ldi	r20, 0x80	; 128
     1ca:	5f e3       	ldi	r21, 0x3F	; 63
     1cc:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     1d0:	88 23       	and	r24, r24
     1d2:	2c f4       	brge	.+10     	; 0x1de <main+0x15c>
		__ticks = 1;
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	9a a3       	std	Y+34, r25	; 0x22
     1da:	89 a3       	std	Y+33, r24	; 0x21
     1dc:	3f c0       	rjmp	.+126    	; 0x25c <main+0x1da>
	else if (__tmp > 65535)
     1de:	6b a1       	ldd	r22, Y+35	; 0x23
     1e0:	7c a1       	ldd	r23, Y+36	; 0x24
     1e2:	8d a1       	ldd	r24, Y+37	; 0x25
     1e4:	9e a1       	ldd	r25, Y+38	; 0x26
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	3f ef       	ldi	r19, 0xFF	; 255
     1ea:	4f e7       	ldi	r20, 0x7F	; 127
     1ec:	57 e4       	ldi	r21, 0x47	; 71
     1ee:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     1f2:	18 16       	cp	r1, r24
     1f4:	4c f5       	brge	.+82     	; 0x248 <main+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1f6:	6f a1       	ldd	r22, Y+39	; 0x27
     1f8:	78 a5       	ldd	r23, Y+40	; 0x28
     1fa:	89 a5       	ldd	r24, Y+41	; 0x29
     1fc:	9a a5       	ldd	r25, Y+42	; 0x2a
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e2       	ldi	r20, 0x20	; 32
     204:	51 e4       	ldi	r21, 0x41	; 65
     206:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     20a:	dc 01       	movw	r26, r24
     20c:	cb 01       	movw	r24, r22
     20e:	bc 01       	movw	r22, r24
     210:	cd 01       	movw	r24, r26
     212:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	9a a3       	std	Y+34, r25	; 0x22
     21c:	89 a3       	std	Y+33, r24	; 0x21
     21e:	0f c0       	rjmp	.+30     	; 0x23e <main+0x1bc>
     220:	89 e1       	ldi	r24, 0x19	; 25
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	98 a3       	std	Y+32, r25	; 0x20
     226:	8f 8f       	std	Y+31, r24	; 0x1f
     228:	8f 8d       	ldd	r24, Y+31	; 0x1f
     22a:	98 a1       	ldd	r25, Y+32	; 0x20
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x1aa>
     230:	98 a3       	std	Y+32, r25	; 0x20
     232:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	89 a1       	ldd	r24, Y+33	; 0x21
     236:	9a a1       	ldd	r25, Y+34	; 0x22
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	9a a3       	std	Y+34, r25	; 0x22
     23c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     23e:	89 a1       	ldd	r24, Y+33	; 0x21
     240:	9a a1       	ldd	r25, Y+34	; 0x22
     242:	00 97       	sbiw	r24, 0x00	; 0
     244:	69 f7       	brne	.-38     	; 0x220 <main+0x19e>
     246:	14 c0       	rjmp	.+40     	; 0x270 <main+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     248:	6b a1       	ldd	r22, Y+35	; 0x23
     24a:	7c a1       	ldd	r23, Y+36	; 0x24
     24c:	8d a1       	ldd	r24, Y+37	; 0x25
     24e:	9e a1       	ldd	r25, Y+38	; 0x26
     250:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     254:	dc 01       	movw	r26, r24
     256:	cb 01       	movw	r24, r22
     258:	9a a3       	std	Y+34, r25	; 0x22
     25a:	89 a3       	std	Y+33, r24	; 0x21
     25c:	89 a1       	ldd	r24, Y+33	; 0x21
     25e:	9a a1       	ldd	r25, Y+34	; 0x22
     260:	9e 8f       	std	Y+30, r25	; 0x1e
     262:	8d 8f       	std	Y+29, r24	; 0x1d
     264:	8d 8d       	ldd	r24, Y+29	; 0x1d
     266:	9e 8d       	ldd	r25, Y+30	; 0x1e
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <main+0x1e6>
     26c:	9e 8f       	std	Y+30, r25	; 0x1e
     26e:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms ( 2 ) ;

    for ( ;; ) {

        Keypad_Out = 0xF0 ; // row =0, col =1
     270:	e8 e3       	ldi	r30, 0x38	; 56
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 ef       	ldi	r24, 0xF0	; 240
     276:	80 83       	st	Z, r24
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	a0 ea       	ldi	r26, 0xA0	; 160
     27e:	b1 e4       	ldi	r27, 0x41	; 65
     280:	89 8f       	std	Y+25, r24	; 0x19
     282:	9a 8f       	std	Y+26, r25	; 0x1a
     284:	ab 8f       	std	Y+27, r26	; 0x1b
     286:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     288:	69 8d       	ldd	r22, Y+25	; 0x19
     28a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     28c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     28e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	4a e7       	ldi	r20, 0x7A	; 122
     296:	53 e4       	ldi	r21, 0x43	; 67
     298:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     29c:	dc 01       	movw	r26, r24
     29e:	cb 01       	movw	r24, r22
     2a0:	8d 8b       	std	Y+21, r24	; 0x15
     2a2:	9e 8b       	std	Y+22, r25	; 0x16
     2a4:	af 8b       	std	Y+23, r26	; 0x17
     2a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     2a8:	6d 89       	ldd	r22, Y+21	; 0x15
     2aa:	7e 89       	ldd	r23, Y+22	; 0x16
     2ac:	8f 89       	ldd	r24, Y+23	; 0x17
     2ae:	98 8d       	ldd	r25, Y+24	; 0x18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 e8       	ldi	r20, 0x80	; 128
     2b6:	5f e3       	ldi	r21, 0x3F	; 63
     2b8:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     2bc:	88 23       	and	r24, r24
     2be:	2c f4       	brge	.+10     	; 0x2ca <main+0x248>
		__ticks = 1;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	9c 8b       	std	Y+20, r25	; 0x14
     2c6:	8b 8b       	std	Y+19, r24	; 0x13
     2c8:	3f c0       	rjmp	.+126    	; 0x348 <main+0x2c6>
	else if (__tmp > 65535)
     2ca:	6d 89       	ldd	r22, Y+21	; 0x15
     2cc:	7e 89       	ldd	r23, Y+22	; 0x16
     2ce:	8f 89       	ldd	r24, Y+23	; 0x17
     2d0:	98 8d       	ldd	r25, Y+24	; 0x18
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	3f ef       	ldi	r19, 0xFF	; 255
     2d6:	4f e7       	ldi	r20, 0x7F	; 127
     2d8:	57 e4       	ldi	r21, 0x47	; 71
     2da:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     2de:	18 16       	cp	r1, r24
     2e0:	4c f5       	brge	.+82     	; 0x334 <main+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2e2:	69 8d       	ldd	r22, Y+25	; 0x19
     2e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	40 e2       	ldi	r20, 0x20	; 32
     2f0:	51 e4       	ldi	r21, 0x41	; 65
     2f2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     2f6:	dc 01       	movw	r26, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	bc 01       	movw	r22, r24
     2fc:	cd 01       	movw	r24, r26
     2fe:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     302:	dc 01       	movw	r26, r24
     304:	cb 01       	movw	r24, r22
     306:	9c 8b       	std	Y+20, r25	; 0x14
     308:	8b 8b       	std	Y+19, r24	; 0x13
     30a:	0f c0       	rjmp	.+30     	; 0x32a <main+0x2a8>
     30c:	89 e1       	ldi	r24, 0x19	; 25
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	9a 8b       	std	Y+18, r25	; 0x12
     312:	89 8b       	std	Y+17, r24	; 0x11
     314:	89 89       	ldd	r24, Y+17	; 0x11
     316:	9a 89       	ldd	r25, Y+18	; 0x12
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <main+0x296>
     31c:	9a 8b       	std	Y+18, r25	; 0x12
     31e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     320:	8b 89       	ldd	r24, Y+19	; 0x13
     322:	9c 89       	ldd	r25, Y+20	; 0x14
     324:	01 97       	sbiw	r24, 0x01	; 1
     326:	9c 8b       	std	Y+20, r25	; 0x14
     328:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     32a:	8b 89       	ldd	r24, Y+19	; 0x13
     32c:	9c 89       	ldd	r25, Y+20	; 0x14
     32e:	00 97       	sbiw	r24, 0x00	; 0
     330:	69 f7       	brne	.-38     	; 0x30c <main+0x28a>
     332:	14 c0       	rjmp	.+40     	; 0x35c <main+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     334:	6d 89       	ldd	r22, Y+21	; 0x15
     336:	7e 89       	ldd	r23, Y+22	; 0x16
     338:	8f 89       	ldd	r24, Y+23	; 0x17
     33a:	98 8d       	ldd	r25, Y+24	; 0x18
     33c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     340:	dc 01       	movw	r26, r24
     342:	cb 01       	movw	r24, r22
     344:	9c 8b       	std	Y+20, r25	; 0x14
     346:	8b 8b       	std	Y+19, r24	; 0x13
     348:	8b 89       	ldd	r24, Y+19	; 0x13
     34a:	9c 89       	ldd	r25, Y+20	; 0x14
     34c:	98 8b       	std	Y+16, r25	; 0x10
     34e:	8f 87       	std	Y+15, r24	; 0x0f
     350:	8f 85       	ldd	r24, Y+15	; 0x0f
     352:	98 89       	ldd	r25, Y+16	; 0x10
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <main+0x2d2>
     358:	98 8b       	std	Y+16, r25	; 0x10
     35a:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms ( 20 ) ;
        unsigned char buffer = Keypad_In ;
     35c:	e6 e3       	ldi	r30, 0x36	; 54
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	89 af       	std	Y+57, r24	; 0x39
        if ( buffer != 0xF0 )   { // i.e any column key is pressed
     364:	89 ad       	ldd	r24, Y+57	; 0x39
     366:	80 3f       	cpi	r24, 0xF0	; 240
     368:	09 f4       	brne	.+2      	; 0x36c <main+0x2ea>
     36a:	82 cf       	rjmp	.-252    	; 0x270 <main+0x1ee>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	a0 ea       	ldi	r26, 0xA0	; 160
     372:	b1 e4       	ldi	r27, 0x41	; 65
     374:	8b 87       	std	Y+11, r24	; 0x0b
     376:	9c 87       	std	Y+12, r25	; 0x0c
     378:	ad 87       	std	Y+13, r26	; 0x0d
     37a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     37c:	6b 85       	ldd	r22, Y+11	; 0x0b
     37e:	7c 85       	ldd	r23, Y+12	; 0x0c
     380:	8d 85       	ldd	r24, Y+13	; 0x0d
     382:	9e 85       	ldd	r25, Y+14	; 0x0e
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	4a e7       	ldi	r20, 0x7A	; 122
     38a:	53 e4       	ldi	r21, 0x43	; 67
     38c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     390:	dc 01       	movw	r26, r24
     392:	cb 01       	movw	r24, r22
     394:	8f 83       	std	Y+7, r24	; 0x07
     396:	98 87       	std	Y+8, r25	; 0x08
     398:	a9 87       	std	Y+9, r26	; 0x09
     39a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     39c:	6f 81       	ldd	r22, Y+7	; 0x07
     39e:	78 85       	ldd	r23, Y+8	; 0x08
     3a0:	89 85       	ldd	r24, Y+9	; 0x09
     3a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 e8       	ldi	r20, 0x80	; 128
     3aa:	5f e3       	ldi	r21, 0x3F	; 63
     3ac:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     3b0:	88 23       	and	r24, r24
     3b2:	2c f4       	brge	.+10     	; 0x3be <main+0x33c>
		__ticks = 1;
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	9e 83       	std	Y+6, r25	; 0x06
     3ba:	8d 83       	std	Y+5, r24	; 0x05
     3bc:	3f c0       	rjmp	.+126    	; 0x43c <main+0x3ba>
	else if (__tmp > 65535)
     3be:	6f 81       	ldd	r22, Y+7	; 0x07
     3c0:	78 85       	ldd	r23, Y+8	; 0x08
     3c2:	89 85       	ldd	r24, Y+9	; 0x09
     3c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	3f ef       	ldi	r19, 0xFF	; 255
     3ca:	4f e7       	ldi	r20, 0x7F	; 127
     3cc:	57 e4       	ldi	r21, 0x47	; 71
     3ce:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     3d2:	18 16       	cp	r1, r24
     3d4:	4c f5       	brge	.+82     	; 0x428 <main+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3d6:	6b 85       	ldd	r22, Y+11	; 0x0b
     3d8:	7c 85       	ldd	r23, Y+12	; 0x0c
     3da:	8d 85       	ldd	r24, Y+13	; 0x0d
     3dc:	9e 85       	ldd	r25, Y+14	; 0x0e
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e2       	ldi	r20, 0x20	; 32
     3e4:	51 e4       	ldi	r21, 0x41	; 65
     3e6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     3ea:	dc 01       	movw	r26, r24
     3ec:	cb 01       	movw	r24, r22
     3ee:	bc 01       	movw	r22, r24
     3f0:	cd 01       	movw	r24, r26
     3f2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	9e 83       	std	Y+6, r25	; 0x06
     3fc:	8d 83       	std	Y+5, r24	; 0x05
     3fe:	0f c0       	rjmp	.+30     	; 0x41e <main+0x39c>
     400:	89 e1       	ldi	r24, 0x19	; 25
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	9c 83       	std	Y+4, r25	; 0x04
     406:	8b 83       	std	Y+3, r24	; 0x03
     408:	8b 81       	ldd	r24, Y+3	; 0x03
     40a:	9c 81       	ldd	r25, Y+4	; 0x04
     40c:	01 97       	sbiw	r24, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <main+0x38a>
     410:	9c 83       	std	Y+4, r25	; 0x04
     412:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     414:	8d 81       	ldd	r24, Y+5	; 0x05
     416:	9e 81       	ldd	r25, Y+6	; 0x06
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	9e 83       	std	Y+6, r25	; 0x06
     41c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     41e:	8d 81       	ldd	r24, Y+5	; 0x05
     420:	9e 81       	ldd	r25, Y+6	; 0x06
     422:	00 97       	sbiw	r24, 0x00	; 0
     424:	69 f7       	brne	.-38     	; 0x400 <main+0x37e>
     426:	14 c0       	rjmp	.+40     	; 0x450 <main+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     428:	6f 81       	ldd	r22, Y+7	; 0x07
     42a:	78 85       	ldd	r23, Y+8	; 0x08
     42c:	89 85       	ldd	r24, Y+9	; 0x09
     42e:	9a 85       	ldd	r25, Y+10	; 0x0a
     430:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     434:	dc 01       	movw	r26, r24
     436:	cb 01       	movw	r24, r22
     438:	9e 83       	std	Y+6, r25	; 0x06
     43a:	8d 83       	std	Y+5, r24	; 0x05
     43c:	8d 81       	ldd	r24, Y+5	; 0x05
     43e:	9e 81       	ldd	r25, Y+6	; 0x06
     440:	9a 83       	std	Y+2, r25	; 0x02
     442:	89 83       	std	Y+1, r24	; 0x01
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	9a 81       	ldd	r25, Y+2	; 0x02
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <main+0x3c6>
     44c:	9a 83       	std	Y+2, r25	; 0x02
     44e:	89 83       	std	Y+1, r24	; 0x01

// now repeated same thing again to ensure that key was pressed

            _delay_ms( 20 )    ;
            buffer = Keypad_In ;
     450:	e6 e3       	ldi	r30, 0x36	; 54
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	89 af       	std	Y+57, r24	; 0x39

            if ( buffer != 0xF0 )   Checking( ) ;  // some key is pressed
     458:	89 ad       	ldd	r24, Y+57	; 0x39
     45a:	80 3f       	cpi	r24, 0xF0	; 240
     45c:	09 f4       	brne	.+2      	; 0x460 <__stack+0x1>
     45e:	08 cf       	rjmp	.-496    	; 0x270 <main+0x1ee>
     460:	0e 94 2a 04 	call	0x854	; 0x854 <Checking>
     464:	05 cf       	rjmp	.-502    	; 0x270 <main+0x1ee>

00000466 <Initialization>:
        }
    }
}

void Initialization ( ) {
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	e8 97       	sbiw	r28, 0x38	; 56
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61

//	setting direction registers :

    DDRB = 0X0F ;                                                   // row as output , col as input ( 0b00001111 )
     47a:	e7 e3       	ldi	r30, 0x37	; 55
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	8f e0       	ldi	r24, 0x0F	; 15
     480:	80 83       	st	Z, r24
    DDRC = 0XFF ;                                                   // data port - LCD
     482:	e4 e3       	ldi	r30, 0x34	; 52
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	8f ef       	ldi	r24, 0xFF	; 255
     488:	80 83       	st	Z, r24

    DDRD = (1<<RS) | (1<<E) ;
     48a:	e1 e3       	ldi	r30, 0x31	; 49
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 ec       	ldi	r24, 0xC0	; 192
     490:	80 83       	st	Z, r24
    Keypad_Out = 0xF0 ;
     492:	e8 e3       	ldi	r30, 0x38	; 56
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 ef       	ldi	r24, 0xF0	; 240
     498:	80 83       	st	Z, r24

//	setting lcd :

    LCD_command(0x38) ;                                                 // 8 bit mode
     49a:	88 e3       	ldi	r24, 0x38	; 56
     49c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_command>
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	a0 e8       	ldi	r26, 0x80	; 128
     4a6:	bf e3       	ldi	r27, 0x3F	; 63
     4a8:	8d ab       	std	Y+53, r24	; 0x35
     4aa:	9e ab       	std	Y+54, r25	; 0x36
     4ac:	af ab       	std	Y+55, r26	; 0x37
     4ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4b0:	6d a9       	ldd	r22, Y+53	; 0x35
     4b2:	7e a9       	ldd	r23, Y+54	; 0x36
     4b4:	8f a9       	ldd	r24, Y+55	; 0x37
     4b6:	98 ad       	ldd	r25, Y+56	; 0x38
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	4a e7       	ldi	r20, 0x7A	; 122
     4be:	53 e4       	ldi	r21, 0x43	; 67
     4c0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     4c4:	dc 01       	movw	r26, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	89 ab       	std	Y+49, r24	; 0x31
     4ca:	9a ab       	std	Y+50, r25	; 0x32
     4cc:	ab ab       	std	Y+51, r26	; 0x33
     4ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     4d0:	69 a9       	ldd	r22, Y+49	; 0x31
     4d2:	7a a9       	ldd	r23, Y+50	; 0x32
     4d4:	8b a9       	ldd	r24, Y+51	; 0x33
     4d6:	9c a9       	ldd	r25, Y+52	; 0x34
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 e8       	ldi	r20, 0x80	; 128
     4de:	5f e3       	ldi	r21, 0x3F	; 63
     4e0:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     4e4:	88 23       	and	r24, r24
     4e6:	2c f4       	brge	.+10     	; 0x4f2 <Initialization+0x8c>
		__ticks = 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	98 ab       	std	Y+48, r25	; 0x30
     4ee:	8f a7       	std	Y+47, r24	; 0x2f
     4f0:	3f c0       	rjmp	.+126    	; 0x570 <Initialization+0x10a>
	else if (__tmp > 65535)
     4f2:	69 a9       	ldd	r22, Y+49	; 0x31
     4f4:	7a a9       	ldd	r23, Y+50	; 0x32
     4f6:	8b a9       	ldd	r24, Y+51	; 0x33
     4f8:	9c a9       	ldd	r25, Y+52	; 0x34
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	3f ef       	ldi	r19, 0xFF	; 255
     4fe:	4f e7       	ldi	r20, 0x7F	; 127
     500:	57 e4       	ldi	r21, 0x47	; 71
     502:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     506:	18 16       	cp	r1, r24
     508:	4c f5       	brge	.+82     	; 0x55c <Initialization+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     50a:	6d a9       	ldd	r22, Y+53	; 0x35
     50c:	7e a9       	ldd	r23, Y+54	; 0x36
     50e:	8f a9       	ldd	r24, Y+55	; 0x37
     510:	98 ad       	ldd	r25, Y+56	; 0x38
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 e2       	ldi	r20, 0x20	; 32
     518:	51 e4       	ldi	r21, 0x41	; 65
     51a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	bc 01       	movw	r22, r24
     524:	cd 01       	movw	r24, r26
     526:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	98 ab       	std	Y+48, r25	; 0x30
     530:	8f a7       	std	Y+47, r24	; 0x2f
     532:	0f c0       	rjmp	.+30     	; 0x552 <Initialization+0xec>
     534:	89 e1       	ldi	r24, 0x19	; 25
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	9e a7       	std	Y+46, r25	; 0x2e
     53a:	8d a7       	std	Y+45, r24	; 0x2d
     53c:	8d a5       	ldd	r24, Y+45	; 0x2d
     53e:	9e a5       	ldd	r25, Y+46	; 0x2e
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <Initialization+0xda>
     544:	9e a7       	std	Y+46, r25	; 0x2e
     546:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     548:	8f a5       	ldd	r24, Y+47	; 0x2f
     54a:	98 a9       	ldd	r25, Y+48	; 0x30
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	98 ab       	std	Y+48, r25	; 0x30
     550:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     552:	8f a5       	ldd	r24, Y+47	; 0x2f
     554:	98 a9       	ldd	r25, Y+48	; 0x30
     556:	00 97       	sbiw	r24, 0x00	; 0
     558:	69 f7       	brne	.-38     	; 0x534 <Initialization+0xce>
     55a:	14 c0       	rjmp	.+40     	; 0x584 <Initialization+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     55c:	69 a9       	ldd	r22, Y+49	; 0x31
     55e:	7a a9       	ldd	r23, Y+50	; 0x32
     560:	8b a9       	ldd	r24, Y+51	; 0x33
     562:	9c a9       	ldd	r25, Y+52	; 0x34
     564:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     568:	dc 01       	movw	r26, r24
     56a:	cb 01       	movw	r24, r22
     56c:	98 ab       	std	Y+48, r25	; 0x30
     56e:	8f a7       	std	Y+47, r24	; 0x2f
     570:	8f a5       	ldd	r24, Y+47	; 0x2f
     572:	98 a9       	ldd	r25, Y+48	; 0x30
     574:	9c a7       	std	Y+44, r25	; 0x2c
     576:	8b a7       	std	Y+43, r24	; 0x2b
     578:	8b a5       	ldd	r24, Y+43	; 0x2b
     57a:	9c a5       	ldd	r25, Y+44	; 0x2c
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <Initialization+0x116>
     580:	9c a7       	std	Y+44, r25	; 0x2c
     582:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms (1) ;

    LCD_command(0x06) ;                                                 // cursor at right
     584:	86 e0       	ldi	r24, 0x06	; 6
     586:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_command>
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	a0 e8       	ldi	r26, 0x80	; 128
     590:	bf e3       	ldi	r27, 0x3F	; 63
     592:	8f a3       	std	Y+39, r24	; 0x27
     594:	98 a7       	std	Y+40, r25	; 0x28
     596:	a9 a7       	std	Y+41, r26	; 0x29
     598:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     59a:	6f a1       	ldd	r22, Y+39	; 0x27
     59c:	78 a5       	ldd	r23, Y+40	; 0x28
     59e:	89 a5       	ldd	r24, Y+41	; 0x29
     5a0:	9a a5       	ldd	r25, Y+42	; 0x2a
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	4a e7       	ldi	r20, 0x7A	; 122
     5a8:	53 e4       	ldi	r21, 0x43	; 67
     5aa:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	8b a3       	std	Y+35, r24	; 0x23
     5b4:	9c a3       	std	Y+36, r25	; 0x24
     5b6:	ad a3       	std	Y+37, r26	; 0x25
     5b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     5ba:	6b a1       	ldd	r22, Y+35	; 0x23
     5bc:	7c a1       	ldd	r23, Y+36	; 0x24
     5be:	8d a1       	ldd	r24, Y+37	; 0x25
     5c0:	9e a1       	ldd	r25, Y+38	; 0x26
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	40 e8       	ldi	r20, 0x80	; 128
     5c8:	5f e3       	ldi	r21, 0x3F	; 63
     5ca:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     5ce:	88 23       	and	r24, r24
     5d0:	2c f4       	brge	.+10     	; 0x5dc <Initialization+0x176>
		__ticks = 1;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	9a a3       	std	Y+34, r25	; 0x22
     5d8:	89 a3       	std	Y+33, r24	; 0x21
     5da:	3f c0       	rjmp	.+126    	; 0x65a <Initialization+0x1f4>
	else if (__tmp > 65535)
     5dc:	6b a1       	ldd	r22, Y+35	; 0x23
     5de:	7c a1       	ldd	r23, Y+36	; 0x24
     5e0:	8d a1       	ldd	r24, Y+37	; 0x25
     5e2:	9e a1       	ldd	r25, Y+38	; 0x26
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	3f ef       	ldi	r19, 0xFF	; 255
     5e8:	4f e7       	ldi	r20, 0x7F	; 127
     5ea:	57 e4       	ldi	r21, 0x47	; 71
     5ec:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     5f0:	18 16       	cp	r1, r24
     5f2:	4c f5       	brge	.+82     	; 0x646 <Initialization+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5f4:	6f a1       	ldd	r22, Y+39	; 0x27
     5f6:	78 a5       	ldd	r23, Y+40	; 0x28
     5f8:	89 a5       	ldd	r24, Y+41	; 0x29
     5fa:	9a a5       	ldd	r25, Y+42	; 0x2a
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	40 e2       	ldi	r20, 0x20	; 32
     602:	51 e4       	ldi	r21, 0x41	; 65
     604:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	bc 01       	movw	r22, r24
     60e:	cd 01       	movw	r24, r26
     610:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     614:	dc 01       	movw	r26, r24
     616:	cb 01       	movw	r24, r22
     618:	9a a3       	std	Y+34, r25	; 0x22
     61a:	89 a3       	std	Y+33, r24	; 0x21
     61c:	0f c0       	rjmp	.+30     	; 0x63c <Initialization+0x1d6>
     61e:	89 e1       	ldi	r24, 0x19	; 25
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	98 a3       	std	Y+32, r25	; 0x20
     624:	8f 8f       	std	Y+31, r24	; 0x1f
     626:	8f 8d       	ldd	r24, Y+31	; 0x1f
     628:	98 a1       	ldd	r25, Y+32	; 0x20
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <Initialization+0x1c4>
     62e:	98 a3       	std	Y+32, r25	; 0x20
     630:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     632:	89 a1       	ldd	r24, Y+33	; 0x21
     634:	9a a1       	ldd	r25, Y+34	; 0x22
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	9a a3       	std	Y+34, r25	; 0x22
     63a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     63c:	89 a1       	ldd	r24, Y+33	; 0x21
     63e:	9a a1       	ldd	r25, Y+34	; 0x22
     640:	00 97       	sbiw	r24, 0x00	; 0
     642:	69 f7       	brne	.-38     	; 0x61e <Initialization+0x1b8>
     644:	14 c0       	rjmp	.+40     	; 0x66e <Initialization+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     646:	6b a1       	ldd	r22, Y+35	; 0x23
     648:	7c a1       	ldd	r23, Y+36	; 0x24
     64a:	8d a1       	ldd	r24, Y+37	; 0x25
     64c:	9e a1       	ldd	r25, Y+38	; 0x26
     64e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	9a a3       	std	Y+34, r25	; 0x22
     658:	89 a3       	std	Y+33, r24	; 0x21
     65a:	89 a1       	ldd	r24, Y+33	; 0x21
     65c:	9a a1       	ldd	r25, Y+34	; 0x22
     65e:	9e 8f       	std	Y+30, r25	; 0x1e
     660:	8d 8f       	std	Y+29, r24	; 0x1d
     662:	8d 8d       	ldd	r24, Y+29	; 0x1d
     664:	9e 8d       	ldd	r25, Y+30	; 0x1e
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <Initialization+0x200>
     66a:	9e 8f       	std	Y+30, r25	; 0x1e
     66c:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms (1) ;

    LCD_command(0x0E) ;                                                 // cursor blinking
     66e:	8e e0       	ldi	r24, 0x0E	; 14
     670:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_command>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	a0 e8       	ldi	r26, 0x80	; 128
     67a:	bf e3       	ldi	r27, 0x3F	; 63
     67c:	89 8f       	std	Y+25, r24	; 0x19
     67e:	9a 8f       	std	Y+26, r25	; 0x1a
     680:	ab 8f       	std	Y+27, r26	; 0x1b
     682:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     684:	69 8d       	ldd	r22, Y+25	; 0x19
     686:	7a 8d       	ldd	r23, Y+26	; 0x1a
     688:	8b 8d       	ldd	r24, Y+27	; 0x1b
     68a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	4a e7       	ldi	r20, 0x7A	; 122
     692:	53 e4       	ldi	r21, 0x43	; 67
     694:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	8d 8b       	std	Y+21, r24	; 0x15
     69e:	9e 8b       	std	Y+22, r25	; 0x16
     6a0:	af 8b       	std	Y+23, r26	; 0x17
     6a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     6a4:	6d 89       	ldd	r22, Y+21	; 0x15
     6a6:	7e 89       	ldd	r23, Y+22	; 0x16
     6a8:	8f 89       	ldd	r24, Y+23	; 0x17
     6aa:	98 8d       	ldd	r25, Y+24	; 0x18
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e8       	ldi	r20, 0x80	; 128
     6b2:	5f e3       	ldi	r21, 0x3F	; 63
     6b4:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     6b8:	88 23       	and	r24, r24
     6ba:	2c f4       	brge	.+10     	; 0x6c6 <Initialization+0x260>
		__ticks = 1;
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	9c 8b       	std	Y+20, r25	; 0x14
     6c2:	8b 8b       	std	Y+19, r24	; 0x13
     6c4:	3f c0       	rjmp	.+126    	; 0x744 <Initialization+0x2de>
	else if (__tmp > 65535)
     6c6:	6d 89       	ldd	r22, Y+21	; 0x15
     6c8:	7e 89       	ldd	r23, Y+22	; 0x16
     6ca:	8f 89       	ldd	r24, Y+23	; 0x17
     6cc:	98 8d       	ldd	r25, Y+24	; 0x18
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	3f ef       	ldi	r19, 0xFF	; 255
     6d2:	4f e7       	ldi	r20, 0x7F	; 127
     6d4:	57 e4       	ldi	r21, 0x47	; 71
     6d6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     6da:	18 16       	cp	r1, r24
     6dc:	4c f5       	brge	.+82     	; 0x730 <Initialization+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6de:	69 8d       	ldd	r22, Y+25	; 0x19
     6e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     6e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e2       	ldi	r20, 0x20	; 32
     6ec:	51 e4       	ldi	r21, 0x41	; 65
     6ee:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	bc 01       	movw	r22, r24
     6f8:	cd 01       	movw	r24, r26
     6fa:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     6fe:	dc 01       	movw	r26, r24
     700:	cb 01       	movw	r24, r22
     702:	9c 8b       	std	Y+20, r25	; 0x14
     704:	8b 8b       	std	Y+19, r24	; 0x13
     706:	0f c0       	rjmp	.+30     	; 0x726 <Initialization+0x2c0>
     708:	89 e1       	ldi	r24, 0x19	; 25
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	9a 8b       	std	Y+18, r25	; 0x12
     70e:	89 8b       	std	Y+17, r24	; 0x11
     710:	89 89       	ldd	r24, Y+17	; 0x11
     712:	9a 89       	ldd	r25, Y+18	; 0x12
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <Initialization+0x2ae>
     718:	9a 8b       	std	Y+18, r25	; 0x12
     71a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     71c:	8b 89       	ldd	r24, Y+19	; 0x13
     71e:	9c 89       	ldd	r25, Y+20	; 0x14
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	9c 8b       	std	Y+20, r25	; 0x14
     724:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     726:	8b 89       	ldd	r24, Y+19	; 0x13
     728:	9c 89       	ldd	r25, Y+20	; 0x14
     72a:	00 97       	sbiw	r24, 0x00	; 0
     72c:	69 f7       	brne	.-38     	; 0x708 <Initialization+0x2a2>
     72e:	14 c0       	rjmp	.+40     	; 0x758 <Initialization+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     730:	6d 89       	ldd	r22, Y+21	; 0x15
     732:	7e 89       	ldd	r23, Y+22	; 0x16
     734:	8f 89       	ldd	r24, Y+23	; 0x17
     736:	98 8d       	ldd	r25, Y+24	; 0x18
     738:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     73c:	dc 01       	movw	r26, r24
     73e:	cb 01       	movw	r24, r22
     740:	9c 8b       	std	Y+20, r25	; 0x14
     742:	8b 8b       	std	Y+19, r24	; 0x13
     744:	8b 89       	ldd	r24, Y+19	; 0x13
     746:	9c 89       	ldd	r25, Y+20	; 0x14
     748:	98 8b       	std	Y+16, r25	; 0x10
     74a:	8f 87       	std	Y+15, r24	; 0x0f
     74c:	8f 85       	ldd	r24, Y+15	; 0x0f
     74e:	98 89       	ldd	r25, Y+16	; 0x10
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <Initialization+0x2ea>
     754:	98 8b       	std	Y+16, r25	; 0x10
     756:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms (1) ;

    LCD_command(0x01) ;                                                  // clear lcd
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_command>
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	a0 e0       	ldi	r26, 0x00	; 0
     764:	b0 e4       	ldi	r27, 0x40	; 64
     766:	8b 87       	std	Y+11, r24	; 0x0b
     768:	9c 87       	std	Y+12, r25	; 0x0c
     76a:	ad 87       	std	Y+13, r26	; 0x0d
     76c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     76e:	6b 85       	ldd	r22, Y+11	; 0x0b
     770:	7c 85       	ldd	r23, Y+12	; 0x0c
     772:	8d 85       	ldd	r24, Y+13	; 0x0d
     774:	9e 85       	ldd	r25, Y+14	; 0x0e
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	4a e7       	ldi	r20, 0x7A	; 122
     77c:	53 e4       	ldi	r21, 0x43	; 67
     77e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     782:	dc 01       	movw	r26, r24
     784:	cb 01       	movw	r24, r22
     786:	8f 83       	std	Y+7, r24	; 0x07
     788:	98 87       	std	Y+8, r25	; 0x08
     78a:	a9 87       	std	Y+9, r26	; 0x09
     78c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     78e:	6f 81       	ldd	r22, Y+7	; 0x07
     790:	78 85       	ldd	r23, Y+8	; 0x08
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	9a 85       	ldd	r25, Y+10	; 0x0a
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e8       	ldi	r20, 0x80	; 128
     79c:	5f e3       	ldi	r21, 0x3F	; 63
     79e:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     7a2:	88 23       	and	r24, r24
     7a4:	2c f4       	brge	.+10     	; 0x7b0 <Initialization+0x34a>
		__ticks = 1;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	9e 83       	std	Y+6, r25	; 0x06
     7ac:	8d 83       	std	Y+5, r24	; 0x05
     7ae:	3f c0       	rjmp	.+126    	; 0x82e <Initialization+0x3c8>
	else if (__tmp > 65535)
     7b0:	6f 81       	ldd	r22, Y+7	; 0x07
     7b2:	78 85       	ldd	r23, Y+8	; 0x08
     7b4:	89 85       	ldd	r24, Y+9	; 0x09
     7b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	3f ef       	ldi	r19, 0xFF	; 255
     7bc:	4f e7       	ldi	r20, 0x7F	; 127
     7be:	57 e4       	ldi	r21, 0x47	; 71
     7c0:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     7c4:	18 16       	cp	r1, r24
     7c6:	4c f5       	brge	.+82     	; 0x81a <Initialization+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c8:	6b 85       	ldd	r22, Y+11	; 0x0b
     7ca:	7c 85       	ldd	r23, Y+12	; 0x0c
     7cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     7ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	40 e2       	ldi	r20, 0x20	; 32
     7d6:	51 e4       	ldi	r21, 0x41	; 65
     7d8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	bc 01       	movw	r22, r24
     7e2:	cd 01       	movw	r24, r26
     7e4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	9e 83       	std	Y+6, r25	; 0x06
     7ee:	8d 83       	std	Y+5, r24	; 0x05
     7f0:	0f c0       	rjmp	.+30     	; 0x810 <Initialization+0x3aa>
     7f2:	89 e1       	ldi	r24, 0x19	; 25
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	9c 83       	std	Y+4, r25	; 0x04
     7f8:	8b 83       	std	Y+3, r24	; 0x03
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <Initialization+0x398>
     802:	9c 83       	std	Y+4, r25	; 0x04
     804:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     806:	8d 81       	ldd	r24, Y+5	; 0x05
     808:	9e 81       	ldd	r25, Y+6	; 0x06
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	9e 83       	std	Y+6, r25	; 0x06
     80e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     810:	8d 81       	ldd	r24, Y+5	; 0x05
     812:	9e 81       	ldd	r25, Y+6	; 0x06
     814:	00 97       	sbiw	r24, 0x00	; 0
     816:	69 f7       	brne	.-38     	; 0x7f2 <Initialization+0x38c>
     818:	14 c0       	rjmp	.+40     	; 0x842 <Initialization+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     81a:	6f 81       	ldd	r22, Y+7	; 0x07
     81c:	78 85       	ldd	r23, Y+8	; 0x08
     81e:	89 85       	ldd	r24, Y+9	; 0x09
     820:	9a 85       	ldd	r25, Y+10	; 0x0a
     822:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	9e 83       	std	Y+6, r25	; 0x06
     82c:	8d 83       	std	Y+5, r24	; 0x05
     82e:	8d 81       	ldd	r24, Y+5	; 0x05
     830:	9e 81       	ldd	r25, Y+6	; 0x06
     832:	9a 83       	std	Y+2, r25	; 0x02
     834:	89 83       	std	Y+1, r24	; 0x01
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	9a 81       	ldd	r25, Y+2	; 0x02
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <Initialization+0x3d4>
     83e:	9a 83       	std	Y+2, r25	; 0x02
     840:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms (2) ;

}
     842:	e8 96       	adiw	r28, 0x38	; 56
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	cf 91       	pop	r28
     850:	df 91       	pop	r29
     852:	08 95       	ret

00000854 <Checking>:

// Keypad Operation  Routine :

void Checking(  ) {
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	df 93       	push	r29
     85a:	cf 93       	push	r28
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	c7 54       	subi	r28, 0x47	; 71
     862:	d0 40       	sbci	r29, 0x00	; 0
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61

// Checking row 1 :

    Keypad_Out = 0xFE ; // 0xFE                                          // make row1=0 and see for any col=0
     86e:	e8 e3       	ldi	r30, 0x38	; 56
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	8e ef       	ldi	r24, 0xFE	; 254
     874:	80 83       	st	Z, r24
     876:	fe 01       	movw	r30, r28
     878:	ed 5b       	subi	r30, 0xBD	; 189
     87a:	ff 4f       	sbci	r31, 0xFF	; 255
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	a0 e8       	ldi	r26, 0x80	; 128
     882:	bf e3       	ldi	r27, 0x3F	; 63
     884:	80 83       	st	Z, r24
     886:	91 83       	std	Z+1, r25	; 0x01
     888:	a2 83       	std	Z+2, r26	; 0x02
     88a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     88c:	8e 01       	movw	r16, r28
     88e:	01 5c       	subi	r16, 0xC1	; 193
     890:	1f 4f       	sbci	r17, 0xFF	; 255
     892:	fe 01       	movw	r30, r28
     894:	ed 5b       	subi	r30, 0xBD	; 189
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	60 81       	ld	r22, Z
     89a:	71 81       	ldd	r23, Z+1	; 0x01
     89c:	82 81       	ldd	r24, Z+2	; 0x02
     89e:	93 81       	ldd	r25, Z+3	; 0x03
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	4a e7       	ldi	r20, 0x7A	; 122
     8a6:	53 e4       	ldi	r21, 0x43	; 67
     8a8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     8ac:	dc 01       	movw	r26, r24
     8ae:	cb 01       	movw	r24, r22
     8b0:	f8 01       	movw	r30, r16
     8b2:	80 83       	st	Z, r24
     8b4:	91 83       	std	Z+1, r25	; 0x01
     8b6:	a2 83       	std	Z+2, r26	; 0x02
     8b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8ba:	fe 01       	movw	r30, r28
     8bc:	ff 96       	adiw	r30, 0x3f	; 63
     8be:	60 81       	ld	r22, Z
     8c0:	71 81       	ldd	r23, Z+1	; 0x01
     8c2:	82 81       	ldd	r24, Z+2	; 0x02
     8c4:	93 81       	ldd	r25, Z+3	; 0x03
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	40 e8       	ldi	r20, 0x80	; 128
     8cc:	5f e3       	ldi	r21, 0x3F	; 63
     8ce:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     8d2:	88 23       	and	r24, r24
     8d4:	2c f4       	brge	.+10     	; 0x8e0 <Checking+0x8c>
		__ticks = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	9e af       	std	Y+62, r25	; 0x3e
     8dc:	8d af       	std	Y+61, r24	; 0x3d
     8de:	46 c0       	rjmp	.+140    	; 0x96c <Checking+0x118>
	else if (__tmp > 65535)
     8e0:	fe 01       	movw	r30, r28
     8e2:	ff 96       	adiw	r30, 0x3f	; 63
     8e4:	60 81       	ld	r22, Z
     8e6:	71 81       	ldd	r23, Z+1	; 0x01
     8e8:	82 81       	ldd	r24, Z+2	; 0x02
     8ea:	93 81       	ldd	r25, Z+3	; 0x03
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	4f e7       	ldi	r20, 0x7F	; 127
     8f2:	57 e4       	ldi	r21, 0x47	; 71
     8f4:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     8f8:	18 16       	cp	r1, r24
     8fa:	64 f5       	brge	.+88     	; 0x954 <Checking+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8fc:	fe 01       	movw	r30, r28
     8fe:	ed 5b       	subi	r30, 0xBD	; 189
     900:	ff 4f       	sbci	r31, 0xFF	; 255
     902:	60 81       	ld	r22, Z
     904:	71 81       	ldd	r23, Z+1	; 0x01
     906:	82 81       	ldd	r24, Z+2	; 0x02
     908:	93 81       	ldd	r25, Z+3	; 0x03
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e2       	ldi	r20, 0x20	; 32
     910:	51 e4       	ldi	r21, 0x41	; 65
     912:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     916:	dc 01       	movw	r26, r24
     918:	cb 01       	movw	r24, r22
     91a:	bc 01       	movw	r22, r24
     91c:	cd 01       	movw	r24, r26
     91e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	9e af       	std	Y+62, r25	; 0x3e
     928:	8d af       	std	Y+61, r24	; 0x3d
     92a:	0f c0       	rjmp	.+30     	; 0x94a <Checking+0xf6>
     92c:	89 e1       	ldi	r24, 0x19	; 25
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	9c af       	std	Y+60, r25	; 0x3c
     932:	8b af       	std	Y+59, r24	; 0x3b
     934:	8b ad       	ldd	r24, Y+59	; 0x3b
     936:	9c ad       	ldd	r25, Y+60	; 0x3c
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <Checking+0xe4>
     93c:	9c af       	std	Y+60, r25	; 0x3c
     93e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     940:	8d ad       	ldd	r24, Y+61	; 0x3d
     942:	9e ad       	ldd	r25, Y+62	; 0x3e
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	9e af       	std	Y+62, r25	; 0x3e
     948:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     94a:	8d ad       	ldd	r24, Y+61	; 0x3d
     94c:	9e ad       	ldd	r25, Y+62	; 0x3e
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	69 f7       	brne	.-38     	; 0x92c <Checking+0xd8>
     952:	16 c0       	rjmp	.+44     	; 0x980 <Checking+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     954:	fe 01       	movw	r30, r28
     956:	ff 96       	adiw	r30, 0x3f	; 63
     958:	60 81       	ld	r22, Z
     95a:	71 81       	ldd	r23, Z+1	; 0x01
     95c:	82 81       	ldd	r24, Z+2	; 0x02
     95e:	93 81       	ldd	r25, Z+3	; 0x03
     960:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	9e af       	std	Y+62, r25	; 0x3e
     96a:	8d af       	std	Y+61, r24	; 0x3d
     96c:	8d ad       	ldd	r24, Y+61	; 0x3d
     96e:	9e ad       	ldd	r25, Y+62	; 0x3e
     970:	9a af       	std	Y+58, r25	; 0x3a
     972:	89 af       	std	Y+57, r24	; 0x39
     974:	89 ad       	ldd	r24, Y+57	; 0x39
     976:	9a ad       	ldd	r25, Y+58	; 0x3a
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <Checking+0x124>
     97c:	9a af       	std	Y+58, r25	; 0x3a
     97e:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms ( 1 ) ;

    unsigned char buffer = Keypad_In ;
     980:	e6 e3       	ldi	r30, 0x36	; 54
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	de 01       	movw	r26, r28
     986:	a9 5b       	subi	r26, 0xB9	; 185
     988:	bf 4f       	sbci	r27, 0xFF	; 255
     98a:	80 81       	ld	r24, Z
     98c:	8c 93       	st	X, r24

    if ( ((Keypad_Out&(1<<Row1))==0) ) {
     98e:	e8 e3       	ldi	r30, 0x38	; 56
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	88 2f       	mov	r24, r24
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	81 70       	andi	r24, 0x01	; 1
     99a:	90 70       	andi	r25, 0x00	; 0
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	b9 f5       	brne	.+110    	; 0xa0e <Checking+0x1ba>

        if 	   ( ((buffer&(1<<Col1))==0) )      LCD_print ( "0") ;
     9a0:	fe 01       	movw	r30, r28
     9a2:	e9 5b       	subi	r30, 0xB9	; 185
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	80 81       	ld	r24, Z
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	80 71       	andi	r24, 0x10	; 16
     9ae:	90 70       	andi	r25, 0x00	; 0
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	29 f4       	brne	.+10     	; 0x9be <Checking+0x16a>
     9b4:	8a e6       	ldi	r24, 0x6A	; 106
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     9bc:	28 c0       	rjmp	.+80     	; 0xa0e <Checking+0x1ba>
        else if ( ( buffer & (1<<Col2) ) == 0 ) LCD_print ( "1") ;
     9be:	fe 01       	movw	r30, r28
     9c0:	e9 5b       	subi	r30, 0xB9	; 185
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	80 81       	ld	r24, Z
     9c6:	88 2f       	mov	r24, r24
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	80 72       	andi	r24, 0x20	; 32
     9cc:	90 70       	andi	r25, 0x00	; 0
     9ce:	00 97       	sbiw	r24, 0x00	; 0
     9d0:	29 f4       	brne	.+10     	; 0x9dc <Checking+0x188>
     9d2:	8c e6       	ldi	r24, 0x6C	; 108
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     9da:	19 c0       	rjmp	.+50     	; 0xa0e <Checking+0x1ba>
        else if ( ( buffer & (1<<Col3) ) == 0 ) LCD_print ( "2") ;
     9dc:	fe 01       	movw	r30, r28
     9de:	e9 5b       	subi	r30, 0xB9	; 185
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	80 81       	ld	r24, Z
     9e4:	88 2f       	mov	r24, r24
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	80 74       	andi	r24, 0x40	; 64
     9ea:	90 70       	andi	r25, 0x00	; 0
     9ec:	00 97       	sbiw	r24, 0x00	; 0
     9ee:	29 f4       	brne	.+10     	; 0x9fa <Checking+0x1a6>
     9f0:	8e e6       	ldi	r24, 0x6E	; 110
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     9f8:	0a c0       	rjmp	.+20     	; 0xa0e <Checking+0x1ba>
        else if ( ( buffer & (1<<Col4) ) == 0 ) LCD_print ( "3") ;
     9fa:	fe 01       	movw	r30, r28
     9fc:	e9 5b       	subi	r30, 0xB9	; 185
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	80 81       	ld	r24, Z
     a02:	88 23       	and	r24, r24
     a04:	24 f0       	brlt	.+8      	; 0xa0e <Checking+0x1ba>
     a06:	80 e7       	ldi	r24, 0x70	; 112
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>

    }

// Checking row 2 :

    Keypad_Out = 0xFD ;     // 0xFD                                       // make row2=0 and see for any col=0
     a0e:	e8 e3       	ldi	r30, 0x38	; 56
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	8d ef       	ldi	r24, 0xFD	; 253
     a14:	80 83       	st	Z, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	a0 e8       	ldi	r26, 0x80	; 128
     a1c:	bf e3       	ldi	r27, 0x3F	; 63
     a1e:	8d ab       	std	Y+53, r24	; 0x35
     a20:	9e ab       	std	Y+54, r25	; 0x36
     a22:	af ab       	std	Y+55, r26	; 0x37
     a24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a26:	6d a9       	ldd	r22, Y+53	; 0x35
     a28:	7e a9       	ldd	r23, Y+54	; 0x36
     a2a:	8f a9       	ldd	r24, Y+55	; 0x37
     a2c:	98 ad       	ldd	r25, Y+56	; 0x38
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	4a e7       	ldi	r20, 0x7A	; 122
     a34:	53 e4       	ldi	r21, 0x43	; 67
     a36:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	89 ab       	std	Y+49, r24	; 0x31
     a40:	9a ab       	std	Y+50, r25	; 0x32
     a42:	ab ab       	std	Y+51, r26	; 0x33
     a44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     a46:	69 a9       	ldd	r22, Y+49	; 0x31
     a48:	7a a9       	ldd	r23, Y+50	; 0x32
     a4a:	8b a9       	ldd	r24, Y+51	; 0x33
     a4c:	9c a9       	ldd	r25, Y+52	; 0x34
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e8       	ldi	r20, 0x80	; 128
     a54:	5f e3       	ldi	r21, 0x3F	; 63
     a56:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     a5a:	88 23       	and	r24, r24
     a5c:	2c f4       	brge	.+10     	; 0xa68 <Checking+0x214>
		__ticks = 1;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	98 ab       	std	Y+48, r25	; 0x30
     a64:	8f a7       	std	Y+47, r24	; 0x2f
     a66:	3f c0       	rjmp	.+126    	; 0xae6 <Checking+0x292>
	else if (__tmp > 65535)
     a68:	69 a9       	ldd	r22, Y+49	; 0x31
     a6a:	7a a9       	ldd	r23, Y+50	; 0x32
     a6c:	8b a9       	ldd	r24, Y+51	; 0x33
     a6e:	9c a9       	ldd	r25, Y+52	; 0x34
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	3f ef       	ldi	r19, 0xFF	; 255
     a74:	4f e7       	ldi	r20, 0x7F	; 127
     a76:	57 e4       	ldi	r21, 0x47	; 71
     a78:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     a7c:	18 16       	cp	r1, r24
     a7e:	4c f5       	brge	.+82     	; 0xad2 <Checking+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a80:	6d a9       	ldd	r22, Y+53	; 0x35
     a82:	7e a9       	ldd	r23, Y+54	; 0x36
     a84:	8f a9       	ldd	r24, Y+55	; 0x37
     a86:	98 ad       	ldd	r25, Y+56	; 0x38
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	40 e2       	ldi	r20, 0x20	; 32
     a8e:	51 e4       	ldi	r21, 0x41	; 65
     a90:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     a94:	dc 01       	movw	r26, r24
     a96:	cb 01       	movw	r24, r22
     a98:	bc 01       	movw	r22, r24
     a9a:	cd 01       	movw	r24, r26
     a9c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     aa0:	dc 01       	movw	r26, r24
     aa2:	cb 01       	movw	r24, r22
     aa4:	98 ab       	std	Y+48, r25	; 0x30
     aa6:	8f a7       	std	Y+47, r24	; 0x2f
     aa8:	0f c0       	rjmp	.+30     	; 0xac8 <Checking+0x274>
     aaa:	89 e1       	ldi	r24, 0x19	; 25
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	9e a7       	std	Y+46, r25	; 0x2e
     ab0:	8d a7       	std	Y+45, r24	; 0x2d
     ab2:	8d a5       	ldd	r24, Y+45	; 0x2d
     ab4:	9e a5       	ldd	r25, Y+46	; 0x2e
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <Checking+0x262>
     aba:	9e a7       	std	Y+46, r25	; 0x2e
     abc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     abe:	8f a5       	ldd	r24, Y+47	; 0x2f
     ac0:	98 a9       	ldd	r25, Y+48	; 0x30
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	98 ab       	std	Y+48, r25	; 0x30
     ac6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
     aca:	98 a9       	ldd	r25, Y+48	; 0x30
     acc:	00 97       	sbiw	r24, 0x00	; 0
     ace:	69 f7       	brne	.-38     	; 0xaaa <Checking+0x256>
     ad0:	14 c0       	rjmp	.+40     	; 0xafa <Checking+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ad2:	69 a9       	ldd	r22, Y+49	; 0x31
     ad4:	7a a9       	ldd	r23, Y+50	; 0x32
     ad6:	8b a9       	ldd	r24, Y+51	; 0x33
     ad8:	9c a9       	ldd	r25, Y+52	; 0x34
     ada:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     ade:	dc 01       	movw	r26, r24
     ae0:	cb 01       	movw	r24, r22
     ae2:	98 ab       	std	Y+48, r25	; 0x30
     ae4:	8f a7       	std	Y+47, r24	; 0x2f
     ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ae8:	98 a9       	ldd	r25, Y+48	; 0x30
     aea:	9c a7       	std	Y+44, r25	; 0x2c
     aec:	8b a7       	std	Y+43, r24	; 0x2b
     aee:	8b a5       	ldd	r24, Y+43	; 0x2b
     af0:	9c a5       	ldd	r25, Y+44	; 0x2c
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <Checking+0x29e>
     af6:	9c a7       	std	Y+44, r25	; 0x2c
     af8:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms ( 1 ) ;

    buffer = Keypad_In ;
     afa:	e6 e3       	ldi	r30, 0x36	; 54
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	de 01       	movw	r26, r28
     b00:	a9 5b       	subi	r26, 0xB9	; 185
     b02:	bf 4f       	sbci	r27, 0xFF	; 255
     b04:	80 81       	ld	r24, Z
     b06:	8c 93       	st	X, r24

    if ( ((Keypad_Out&(1<<Row2))==0) ) {
     b08:	e8 e3       	ldi	r30, 0x38	; 56
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	88 2f       	mov	r24, r24
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	82 70       	andi	r24, 0x02	; 2
     b14:	90 70       	andi	r25, 0x00	; 0
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	b9 f5       	brne	.+110    	; 0xb88 <Checking+0x334>

        if 	   ( ((buffer&(1<<Col1))==0) )       LCD_print ( "4") ;
     b1a:	fe 01       	movw	r30, r28
     b1c:	e9 5b       	subi	r30, 0xB9	; 185
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	80 81       	ld	r24, Z
     b22:	88 2f       	mov	r24, r24
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	80 71       	andi	r24, 0x10	; 16
     b28:	90 70       	andi	r25, 0x00	; 0
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	29 f4       	brne	.+10     	; 0xb38 <Checking+0x2e4>
     b2e:	82 e7       	ldi	r24, 0x72	; 114
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     b36:	28 c0       	rjmp	.+80     	; 0xb88 <Checking+0x334>
        else if  ( ( buffer & (1<<Col2) ) == 0 ) LCD_print ( "5") ;
     b38:	fe 01       	movw	r30, r28
     b3a:	e9 5b       	subi	r30, 0xB9	; 185
     b3c:	ff 4f       	sbci	r31, 0xFF	; 255
     b3e:	80 81       	ld	r24, Z
     b40:	88 2f       	mov	r24, r24
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	80 72       	andi	r24, 0x20	; 32
     b46:	90 70       	andi	r25, 0x00	; 0
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	29 f4       	brne	.+10     	; 0xb56 <Checking+0x302>
     b4c:	84 e7       	ldi	r24, 0x74	; 116
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     b54:	19 c0       	rjmp	.+50     	; 0xb88 <Checking+0x334>
        else if  ( ( buffer & (1<<Col3) ) == 0 ) LCD_print ( "6") ;
     b56:	fe 01       	movw	r30, r28
     b58:	e9 5b       	subi	r30, 0xB9	; 185
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	80 81       	ld	r24, Z
     b5e:	88 2f       	mov	r24, r24
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	80 74       	andi	r24, 0x40	; 64
     b64:	90 70       	andi	r25, 0x00	; 0
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	29 f4       	brne	.+10     	; 0xb74 <Checking+0x320>
     b6a:	86 e7       	ldi	r24, 0x76	; 118
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     b72:	0a c0       	rjmp	.+20     	; 0xb88 <Checking+0x334>
        else if  ( ( buffer & (1<<Col4) ) == 0 ) LCD_print ( "7") ;
     b74:	fe 01       	movw	r30, r28
     b76:	e9 5b       	subi	r30, 0xB9	; 185
     b78:	ff 4f       	sbci	r31, 0xFF	; 255
     b7a:	80 81       	ld	r24, Z
     b7c:	88 23       	and	r24, r24
     b7e:	24 f0       	brlt	.+8      	; 0xb88 <Checking+0x334>
     b80:	88 e7       	ldi	r24, 0x78	; 120
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>

    }

// Checking row 3 :

    Keypad_Out = 0xFB ; // 0xFB                                            // make row3=0 and see for any col=0
     b88:	e8 e3       	ldi	r30, 0x38	; 56
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	8b ef       	ldi	r24, 0xFB	; 251
     b8e:	80 83       	st	Z, r24
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e8       	ldi	r26, 0x80	; 128
     b96:	bf e3       	ldi	r27, 0x3F	; 63
     b98:	8f a3       	std	Y+39, r24	; 0x27
     b9a:	98 a7       	std	Y+40, r25	; 0x28
     b9c:	a9 a7       	std	Y+41, r26	; 0x29
     b9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba0:	6f a1       	ldd	r22, Y+39	; 0x27
     ba2:	78 a5       	ldd	r23, Y+40	; 0x28
     ba4:	89 a5       	ldd	r24, Y+41	; 0x29
     ba6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	4a e7       	ldi	r20, 0x7A	; 122
     bae:	53 e4       	ldi	r21, 0x43	; 67
     bb0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	8b a3       	std	Y+35, r24	; 0x23
     bba:	9c a3       	std	Y+36, r25	; 0x24
     bbc:	ad a3       	std	Y+37, r26	; 0x25
     bbe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bc0:	6b a1       	ldd	r22, Y+35	; 0x23
     bc2:	7c a1       	ldd	r23, Y+36	; 0x24
     bc4:	8d a1       	ldd	r24, Y+37	; 0x25
     bc6:	9e a1       	ldd	r25, Y+38	; 0x26
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e8       	ldi	r20, 0x80	; 128
     bce:	5f e3       	ldi	r21, 0x3F	; 63
     bd0:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	2c f4       	brge	.+10     	; 0xbe2 <Checking+0x38e>
		__ticks = 1;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9a a3       	std	Y+34, r25	; 0x22
     bde:	89 a3       	std	Y+33, r24	; 0x21
     be0:	3f c0       	rjmp	.+126    	; 0xc60 <Checking+0x40c>
	else if (__tmp > 65535)
     be2:	6b a1       	ldd	r22, Y+35	; 0x23
     be4:	7c a1       	ldd	r23, Y+36	; 0x24
     be6:	8d a1       	ldd	r24, Y+37	; 0x25
     be8:	9e a1       	ldd	r25, Y+38	; 0x26
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	3f ef       	ldi	r19, 0xFF	; 255
     bee:	4f e7       	ldi	r20, 0x7F	; 127
     bf0:	57 e4       	ldi	r21, 0x47	; 71
     bf2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     bf6:	18 16       	cp	r1, r24
     bf8:	4c f5       	brge	.+82     	; 0xc4c <Checking+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfa:	6f a1       	ldd	r22, Y+39	; 0x27
     bfc:	78 a5       	ldd	r23, Y+40	; 0x28
     bfe:	89 a5       	ldd	r24, Y+41	; 0x29
     c00:	9a a5       	ldd	r25, Y+42	; 0x2a
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e2       	ldi	r20, 0x20	; 32
     c08:	51 e4       	ldi	r21, 0x41	; 65
     c0a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	9a a3       	std	Y+34, r25	; 0x22
     c20:	89 a3       	std	Y+33, r24	; 0x21
     c22:	0f c0       	rjmp	.+30     	; 0xc42 <Checking+0x3ee>
     c24:	89 e1       	ldi	r24, 0x19	; 25
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	98 a3       	std	Y+32, r25	; 0x20
     c2a:	8f 8f       	std	Y+31, r24	; 0x1f
     c2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c2e:	98 a1       	ldd	r25, Y+32	; 0x20
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <Checking+0x3dc>
     c34:	98 a3       	std	Y+32, r25	; 0x20
     c36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c38:	89 a1       	ldd	r24, Y+33	; 0x21
     c3a:	9a a1       	ldd	r25, Y+34	; 0x22
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	9a a3       	std	Y+34, r25	; 0x22
     c40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c42:	89 a1       	ldd	r24, Y+33	; 0x21
     c44:	9a a1       	ldd	r25, Y+34	; 0x22
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	69 f7       	brne	.-38     	; 0xc24 <Checking+0x3d0>
     c4a:	14 c0       	rjmp	.+40     	; 0xc74 <Checking+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4c:	6b a1       	ldd	r22, Y+35	; 0x23
     c4e:	7c a1       	ldd	r23, Y+36	; 0x24
     c50:	8d a1       	ldd	r24, Y+37	; 0x25
     c52:	9e a1       	ldd	r25, Y+38	; 0x26
     c54:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	9a a3       	std	Y+34, r25	; 0x22
     c5e:	89 a3       	std	Y+33, r24	; 0x21
     c60:	89 a1       	ldd	r24, Y+33	; 0x21
     c62:	9a a1       	ldd	r25, Y+34	; 0x22
     c64:	9e 8f       	std	Y+30, r25	; 0x1e
     c66:	8d 8f       	std	Y+29, r24	; 0x1d
     c68:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <Checking+0x418>
     c70:	9e 8f       	std	Y+30, r25	; 0x1e
     c72:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms ( 1 ) ;

    buffer = Keypad_In ;
     c74:	e6 e3       	ldi	r30, 0x36	; 54
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	de 01       	movw	r26, r28
     c7a:	a9 5b       	subi	r26, 0xB9	; 185
     c7c:	bf 4f       	sbci	r27, 0xFF	; 255
     c7e:	80 81       	ld	r24, Z
     c80:	8c 93       	st	X, r24
    if ( ((Keypad_Out&(1<<Row3))==0) ) {
     c82:	e8 e3       	ldi	r30, 0x38	; 56
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	84 70       	andi	r24, 0x04	; 4
     c8e:	90 70       	andi	r25, 0x00	; 0
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	b9 f5       	brne	.+110    	; 0xd02 <Checking+0x4ae>

        if 		 ( ( buffer & (1<<Col1) ) == 0 ) LCD_print ( "8") ;
     c94:	fe 01       	movw	r30, r28
     c96:	e9 5b       	subi	r30, 0xB9	; 185
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	80 81       	ld	r24, Z
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	80 71       	andi	r24, 0x10	; 16
     ca2:	90 70       	andi	r25, 0x00	; 0
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	29 f4       	brne	.+10     	; 0xcb2 <Checking+0x45e>
     ca8:	8a e7       	ldi	r24, 0x7A	; 122
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     cb0:	28 c0       	rjmp	.+80     	; 0xd02 <Checking+0x4ae>
        else if  ( ( buffer & (1<<Col2) ) == 0 ) LCD_print ( "9") ;
     cb2:	fe 01       	movw	r30, r28
     cb4:	e9 5b       	subi	r30, 0xB9	; 185
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	80 81       	ld	r24, Z
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	80 72       	andi	r24, 0x20	; 32
     cc0:	90 70       	andi	r25, 0x00	; 0
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	29 f4       	brne	.+10     	; 0xcd0 <Checking+0x47c>
     cc6:	8c e7       	ldi	r24, 0x7C	; 124
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     cce:	19 c0       	rjmp	.+50     	; 0xd02 <Checking+0x4ae>
        else if  ( ( buffer & (1<<Col3) ) == 0 ) LCD_print ( "A") ;
     cd0:	fe 01       	movw	r30, r28
     cd2:	e9 5b       	subi	r30, 0xB9	; 185
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	80 81       	ld	r24, Z
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	80 74       	andi	r24, 0x40	; 64
     cde:	90 70       	andi	r25, 0x00	; 0
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	29 f4       	brne	.+10     	; 0xcee <Checking+0x49a>
     ce4:	8e e7       	ldi	r24, 0x7E	; 126
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     cec:	0a c0       	rjmp	.+20     	; 0xd02 <Checking+0x4ae>
        else if  ( ( buffer & (1<<Col4) ) == 0 ) LCD_print ( "B") ;
     cee:	fe 01       	movw	r30, r28
     cf0:	e9 5b       	subi	r30, 0xB9	; 185
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	80 81       	ld	r24, Z
     cf6:	88 23       	and	r24, r24
     cf8:	24 f0       	brlt	.+8      	; 0xd02 <Checking+0x4ae>
     cfa:	80 e8       	ldi	r24, 0x80	; 128
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>

    }

// Checking row 4 :

    Keypad_Out = 0xF7 ; // 0xF7                                             // make row4=0 and see for any col=0
     d02:	e8 e3       	ldi	r30, 0x38	; 56
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	87 ef       	ldi	r24, 0xF7	; 247
     d08:	80 83       	st	Z, r24
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	a0 e8       	ldi	r26, 0x80	; 128
     d10:	bf e3       	ldi	r27, 0x3F	; 63
     d12:	89 8f       	std	Y+25, r24	; 0x19
     d14:	9a 8f       	std	Y+26, r25	; 0x1a
     d16:	ab 8f       	std	Y+27, r26	; 0x1b
     d18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1a:	69 8d       	ldd	r22, Y+25	; 0x19
     d1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	4a e7       	ldi	r20, 0x7A	; 122
     d28:	53 e4       	ldi	r21, 0x43	; 67
     d2a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	8d 8b       	std	Y+21, r24	; 0x15
     d34:	9e 8b       	std	Y+22, r25	; 0x16
     d36:	af 8b       	std	Y+23, r26	; 0x17
     d38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d3a:	6d 89       	ldd	r22, Y+21	; 0x15
     d3c:	7e 89       	ldd	r23, Y+22	; 0x16
     d3e:	8f 89       	ldd	r24, Y+23	; 0x17
     d40:	98 8d       	ldd	r25, Y+24	; 0x18
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e8       	ldi	r20, 0x80	; 128
     d48:	5f e3       	ldi	r21, 0x3F	; 63
     d4a:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     d4e:	88 23       	and	r24, r24
     d50:	2c f4       	brge	.+10     	; 0xd5c <Checking+0x508>
		__ticks = 1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 8b       	std	Y+20, r25	; 0x14
     d58:	8b 8b       	std	Y+19, r24	; 0x13
     d5a:	3f c0       	rjmp	.+126    	; 0xdda <Checking+0x586>
	else if (__tmp > 65535)
     d5c:	6d 89       	ldd	r22, Y+21	; 0x15
     d5e:	7e 89       	ldd	r23, Y+22	; 0x16
     d60:	8f 89       	ldd	r24, Y+23	; 0x17
     d62:	98 8d       	ldd	r25, Y+24	; 0x18
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	3f ef       	ldi	r19, 0xFF	; 255
     d68:	4f e7       	ldi	r20, 0x7F	; 127
     d6a:	57 e4       	ldi	r21, 0x47	; 71
     d6c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     d70:	18 16       	cp	r1, r24
     d72:	4c f5       	brge	.+82     	; 0xdc6 <Checking+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d74:	69 8d       	ldd	r22, Y+25	; 0x19
     d76:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d78:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e2       	ldi	r20, 0x20	; 32
     d82:	51 e4       	ldi	r21, 0x41	; 65
     d84:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	9c 8b       	std	Y+20, r25	; 0x14
     d9a:	8b 8b       	std	Y+19, r24	; 0x13
     d9c:	0f c0       	rjmp	.+30     	; 0xdbc <Checking+0x568>
     d9e:	89 e1       	ldi	r24, 0x19	; 25
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9a 8b       	std	Y+18, r25	; 0x12
     da4:	89 8b       	std	Y+17, r24	; 0x11
     da6:	89 89       	ldd	r24, Y+17	; 0x11
     da8:	9a 89       	ldd	r25, Y+18	; 0x12
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <Checking+0x556>
     dae:	9a 8b       	std	Y+18, r25	; 0x12
     db0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db2:	8b 89       	ldd	r24, Y+19	; 0x13
     db4:	9c 89       	ldd	r25, Y+20	; 0x14
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	9c 8b       	std	Y+20, r25	; 0x14
     dba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dbc:	8b 89       	ldd	r24, Y+19	; 0x13
     dbe:	9c 89       	ldd	r25, Y+20	; 0x14
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	69 f7       	brne	.-38     	; 0xd9e <Checking+0x54a>
     dc4:	14 c0       	rjmp	.+40     	; 0xdee <Checking+0x59a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc6:	6d 89       	ldd	r22, Y+21	; 0x15
     dc8:	7e 89       	ldd	r23, Y+22	; 0x16
     dca:	8f 89       	ldd	r24, Y+23	; 0x17
     dcc:	98 8d       	ldd	r25, Y+24	; 0x18
     dce:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	9c 8b       	std	Y+20, r25	; 0x14
     dd8:	8b 8b       	std	Y+19, r24	; 0x13
     dda:	8b 89       	ldd	r24, Y+19	; 0x13
     ddc:	9c 89       	ldd	r25, Y+20	; 0x14
     dde:	98 8b       	std	Y+16, r25	; 0x10
     de0:	8f 87       	std	Y+15, r24	; 0x0f
     de2:	8f 85       	ldd	r24, Y+15	; 0x0f
     de4:	98 89       	ldd	r25, Y+16	; 0x10
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <Checking+0x592>
     dea:	98 8b       	std	Y+16, r25	; 0x10
     dec:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms ( 1 ) ;

    buffer = Keypad_In ;
     dee:	e6 e3       	ldi	r30, 0x36	; 54
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	de 01       	movw	r26, r28
     df4:	a9 5b       	subi	r26, 0xB9	; 185
     df6:	bf 4f       	sbci	r27, 0xFF	; 255
     df8:	80 81       	ld	r24, Z
     dfa:	8c 93       	st	X, r24

    if ( ((Keypad_Out&(1<<Row4))==0) ) {
     dfc:	e8 e3       	ldi	r30, 0x38	; 56
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	88 70       	andi	r24, 0x08	; 8
     e08:	90 70       	andi	r25, 0x00	; 0
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	b9 f5       	brne	.+110    	; 0xe7c <Checking+0x628>

        if 		 ( ( buffer & (1<<Col1) ) == 0 ) LCD_print ( "C" ) ;
     e0e:	fe 01       	movw	r30, r28
     e10:	e9 5b       	subi	r30, 0xB9	; 185
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	80 81       	ld	r24, Z
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	80 71       	andi	r24, 0x10	; 16
     e1c:	90 70       	andi	r25, 0x00	; 0
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	29 f4       	brne	.+10     	; 0xe2c <Checking+0x5d8>
     e22:	82 e8       	ldi	r24, 0x82	; 130
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     e2a:	28 c0       	rjmp	.+80     	; 0xe7c <Checking+0x628>
        else if  ( ( buffer & (1<<Col2) ) == 0 ) LCD_print ( "D") ;
     e2c:	fe 01       	movw	r30, r28
     e2e:	e9 5b       	subi	r30, 0xB9	; 185
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	80 81       	ld	r24, Z
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	80 72       	andi	r24, 0x20	; 32
     e3a:	90 70       	andi	r25, 0x00	; 0
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	29 f4       	brne	.+10     	; 0xe4a <Checking+0x5f6>
     e40:	84 e8       	ldi	r24, 0x84	; 132
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     e48:	19 c0       	rjmp	.+50     	; 0xe7c <Checking+0x628>
        else if  ( ( buffer & (1<<Col3) ) == 0 ) LCD_print ( "E") ;
     e4a:	fe 01       	movw	r30, r28
     e4c:	e9 5b       	subi	r30, 0xB9	; 185
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	80 81       	ld	r24, Z
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	80 74       	andi	r24, 0x40	; 64
     e58:	90 70       	andi	r25, 0x00	; 0
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	29 f4       	brne	.+10     	; 0xe68 <Checking+0x614>
     e5e:	86 e8       	ldi	r24, 0x86	; 134
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     e66:	0a c0       	rjmp	.+20     	; 0xe7c <Checking+0x628>
        else if  ( ( buffer & (1<<Col4) ) == 0 ) LCD_print ( "F") ;
     e68:	fe 01       	movw	r30, r28
     e6a:	e9 5b       	subi	r30, 0xB9	; 185
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	80 81       	ld	r24, Z
     e70:	88 23       	and	r24, r24
     e72:	24 f0       	brlt	.+8      	; 0xe7c <Checking+0x628>
     e74:	88 e8       	ldi	r24, 0x88	; 136
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_print>
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	a0 ea       	ldi	r26, 0xA0	; 160
     e82:	b1 e4       	ldi	r27, 0x41	; 65
     e84:	8b 87       	std	Y+11, r24	; 0x0b
     e86:	9c 87       	std	Y+12, r25	; 0x0c
     e88:	ad 87       	std	Y+13, r26	; 0x0d
     e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e90:	8d 85       	ldd	r24, Y+13	; 0x0d
     e92:	9e 85       	ldd	r25, Y+14	; 0x0e
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	4a e7       	ldi	r20, 0x7A	; 122
     e9a:	53 e4       	ldi	r21, 0x43	; 67
     e9c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	8f 83       	std	Y+7, r24	; 0x07
     ea6:	98 87       	std	Y+8, r25	; 0x08
     ea8:	a9 87       	std	Y+9, r26	; 0x09
     eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eac:	6f 81       	ldd	r22, Y+7	; 0x07
     eae:	78 85       	ldd	r23, Y+8	; 0x08
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e8       	ldi	r20, 0x80	; 128
     eba:	5f e3       	ldi	r21, 0x3F	; 63
     ebc:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     ec0:	88 23       	and	r24, r24
     ec2:	2c f4       	brge	.+10     	; 0xece <Checking+0x67a>
		__ticks = 1;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	9e 83       	std	Y+6, r25	; 0x06
     eca:	8d 83       	std	Y+5, r24	; 0x05
     ecc:	3f c0       	rjmp	.+126    	; 0xf4c <Checking+0x6f8>
	else if (__tmp > 65535)
     ece:	6f 81       	ldd	r22, Y+7	; 0x07
     ed0:	78 85       	ldd	r23, Y+8	; 0x08
     ed2:	89 85       	ldd	r24, Y+9	; 0x09
     ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	3f ef       	ldi	r19, 0xFF	; 255
     eda:	4f e7       	ldi	r20, 0x7F	; 127
     edc:	57 e4       	ldi	r21, 0x47	; 71
     ede:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
     ee2:	18 16       	cp	r1, r24
     ee4:	4c f5       	brge	.+82     	; 0xf38 <Checking+0x6e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eea:	8d 85       	ldd	r24, Y+13	; 0x0d
     eec:	9e 85       	ldd	r25, Y+14	; 0x0e
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e2       	ldi	r20, 0x20	; 32
     ef4:	51 e4       	ldi	r21, 0x41	; 65
     ef6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	9e 83       	std	Y+6, r25	; 0x06
     f0c:	8d 83       	std	Y+5, r24	; 0x05
     f0e:	0f c0       	rjmp	.+30     	; 0xf2e <Checking+0x6da>
     f10:	89 e1       	ldi	r24, 0x19	; 25
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	9c 83       	std	Y+4, r25	; 0x04
     f16:	8b 83       	std	Y+3, r24	; 0x03
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <Checking+0x6c8>
     f20:	9c 83       	std	Y+4, r25	; 0x04
     f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	9e 81       	ldd	r25, Y+6	; 0x06
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	9e 83       	std	Y+6, r25	; 0x06
     f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2e:	8d 81       	ldd	r24, Y+5	; 0x05
     f30:	9e 81       	ldd	r25, Y+6	; 0x06
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	69 f7       	brne	.-38     	; 0xf10 <Checking+0x6bc>
     f36:	14 c0       	rjmp	.+40     	; 0xf60 <Checking+0x70c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f38:	6f 81       	ldd	r22, Y+7	; 0x07
     f3a:	78 85       	ldd	r23, Y+8	; 0x08
     f3c:	89 85       	ldd	r24, Y+9	; 0x09
     f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f40:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	9e 83       	std	Y+6, r25	; 0x06
     f4a:	8d 83       	std	Y+5, r24	; 0x05
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	9e 81       	ldd	r25, Y+6	; 0x06
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <Checking+0x704>
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01

    }
    _delay_ms ( 20 ) ;
    LCD_command( 0x01 ) ;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_command>

}
     f66:	c9 5b       	subi	r28, 0xB9	; 185
     f68:	df 4f       	sbci	r29, 0xFF	; 255
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <LCD_command>:

// Command sending Routine :

void LCD_command ( unsigned char a ) {
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	6d 97       	sbiw	r28, 0x1d	; 29
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	8d 8f       	std	Y+29, r24	; 0x1d

    Data = a ;
     f94:	e5 e3       	ldi	r30, 0x35	; 53
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f9a:	80 83       	st	Z, r24
    Command = (0<<RS) | (1<<E) ;
     f9c:	e2 e3       	ldi	r30, 0x32	; 50
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 e8       	ldi	r24, 0x80	; 128
     fa2:	80 83       	st	Z, r24
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a0 e8       	ldi	r26, 0x80	; 128
     faa:	bf e3       	ldi	r27, 0x3F	; 63
     fac:	89 8f       	std	Y+25, r24	; 0x19
     fae:	9a 8f       	std	Y+26, r25	; 0x1a
     fb0:	ab 8f       	std	Y+27, r26	; 0x1b
     fb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb4:	69 8d       	ldd	r22, Y+25	; 0x19
     fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	4a e7       	ldi	r20, 0x7A	; 122
     fc2:	53 e4       	ldi	r21, 0x43	; 67
     fc4:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8d 8b       	std	Y+21, r24	; 0x15
     fce:	9e 8b       	std	Y+22, r25	; 0x16
     fd0:	af 8b       	std	Y+23, r26	; 0x17
     fd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fd4:	6d 89       	ldd	r22, Y+21	; 0x15
     fd6:	7e 89       	ldd	r23, Y+22	; 0x16
     fd8:	8f 89       	ldd	r24, Y+23	; 0x17
     fda:	98 8d       	ldd	r25, Y+24	; 0x18
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e8       	ldi	r20, 0x80	; 128
     fe2:	5f e3       	ldi	r21, 0x3F	; 63
     fe4:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
     fe8:	88 23       	and	r24, r24
     fea:	2c f4       	brge	.+10     	; 0xff6 <LCD_command+0x78>
		__ticks = 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9c 8b       	std	Y+20, r25	; 0x14
     ff2:	8b 8b       	std	Y+19, r24	; 0x13
     ff4:	3f c0       	rjmp	.+126    	; 0x1074 <LCD_command+0xf6>
	else if (__tmp > 65535)
     ff6:	6d 89       	ldd	r22, Y+21	; 0x15
     ff8:	7e 89       	ldd	r23, Y+22	; 0x16
     ffa:	8f 89       	ldd	r24, Y+23	; 0x17
     ffc:	98 8d       	ldd	r25, Y+24	; 0x18
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	3f ef       	ldi	r19, 0xFF	; 255
    1002:	4f e7       	ldi	r20, 0x7F	; 127
    1004:	57 e4       	ldi	r21, 0x47	; 71
    1006:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
    100a:	18 16       	cp	r1, r24
    100c:	4c f5       	brge	.+82     	; 0x1060 <LCD_command+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100e:	69 8d       	ldd	r22, Y+25	; 0x19
    1010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e2       	ldi	r20, 0x20	; 32
    101c:	51 e4       	ldi	r21, 0x41	; 65
    101e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9c 8b       	std	Y+20, r25	; 0x14
    1034:	8b 8b       	std	Y+19, r24	; 0x13
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <LCD_command+0xd8>
    1038:	89 e1       	ldi	r24, 0x19	; 25
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9a 8b       	std	Y+18, r25	; 0x12
    103e:	89 8b       	std	Y+17, r24	; 0x11
    1040:	89 89       	ldd	r24, Y+17	; 0x11
    1042:	9a 89       	ldd	r25, Y+18	; 0x12
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <LCD_command+0xc6>
    1048:	9a 8b       	std	Y+18, r25	; 0x12
    104a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104c:	8b 89       	ldd	r24, Y+19	; 0x13
    104e:	9c 89       	ldd	r25, Y+20	; 0x14
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	9c 8b       	std	Y+20, r25	; 0x14
    1054:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1056:	8b 89       	ldd	r24, Y+19	; 0x13
    1058:	9c 89       	ldd	r25, Y+20	; 0x14
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	69 f7       	brne	.-38     	; 0x1038 <LCD_command+0xba>
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <LCD_command+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1060:	6d 89       	ldd	r22, Y+21	; 0x15
    1062:	7e 89       	ldd	r23, Y+22	; 0x16
    1064:	8f 89       	ldd	r24, Y+23	; 0x17
    1066:	98 8d       	ldd	r25, Y+24	; 0x18
    1068:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9c 8b       	std	Y+20, r25	; 0x14
    1072:	8b 8b       	std	Y+19, r24	; 0x13
    1074:	8b 89       	ldd	r24, Y+19	; 0x13
    1076:	9c 89       	ldd	r25, Y+20	; 0x14
    1078:	98 8b       	std	Y+16, r25	; 0x10
    107a:	8f 87       	std	Y+15, r24	; 0x0f
    107c:	8f 85       	ldd	r24, Y+15	; 0x0f
    107e:	98 89       	ldd	r25, Y+16	; 0x10
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <LCD_command+0x102>
    1084:	98 8b       	std	Y+16, r25	; 0x10
    1086:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms (1) ;
    Command = (0<<RS) | (0<<E) ;
    1088:	e2 e3       	ldi	r30, 0x32	; 50
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	10 82       	st	Z, r1
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	a0 e2       	ldi	r26, 0x20	; 32
    1094:	b2 e4       	ldi	r27, 0x42	; 66
    1096:	8b 87       	std	Y+11, r24	; 0x0b
    1098:	9c 87       	std	Y+12, r25	; 0x0c
    109a:	ad 87       	std	Y+13, r26	; 0x0d
    109c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    109e:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	4a e7       	ldi	r20, 0x7A	; 122
    10ac:	53 e4       	ldi	r21, 0x43	; 67
    10ae:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	8f 83       	std	Y+7, r24	; 0x07
    10b8:	98 87       	std	Y+8, r25	; 0x08
    10ba:	a9 87       	std	Y+9, r26	; 0x09
    10bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10be:	6f 81       	ldd	r22, Y+7	; 0x07
    10c0:	78 85       	ldd	r23, Y+8	; 0x08
    10c2:	89 85       	ldd	r24, Y+9	; 0x09
    10c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e8       	ldi	r20, 0x80	; 128
    10cc:	5f e3       	ldi	r21, 0x3F	; 63
    10ce:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
    10d2:	88 23       	and	r24, r24
    10d4:	2c f4       	brge	.+10     	; 0x10e0 <LCD_command+0x162>
		__ticks = 1;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	9e 83       	std	Y+6, r25	; 0x06
    10dc:	8d 83       	std	Y+5, r24	; 0x05
    10de:	3f c0       	rjmp	.+126    	; 0x115e <LCD_command+0x1e0>
	else if (__tmp > 65535)
    10e0:	6f 81       	ldd	r22, Y+7	; 0x07
    10e2:	78 85       	ldd	r23, Y+8	; 0x08
    10e4:	89 85       	ldd	r24, Y+9	; 0x09
    10e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	3f ef       	ldi	r19, 0xFF	; 255
    10ec:	4f e7       	ldi	r20, 0x7F	; 127
    10ee:	57 e4       	ldi	r21, 0x47	; 71
    10f0:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
    10f4:	18 16       	cp	r1, r24
    10f6:	4c f5       	brge	.+82     	; 0x114a <LCD_command+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e2       	ldi	r20, 0x20	; 32
    1106:	51 e4       	ldi	r21, 0x41	; 65
    1108:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	9e 83       	std	Y+6, r25	; 0x06
    111e:	8d 83       	std	Y+5, r24	; 0x05
    1120:	0f c0       	rjmp	.+30     	; 0x1140 <LCD_command+0x1c2>
    1122:	89 e1       	ldi	r24, 0x19	; 25
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9c 83       	std	Y+4, r25	; 0x04
    1128:	8b 83       	std	Y+3, r24	; 0x03
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <LCD_command+0x1b0>
    1132:	9c 83       	std	Y+4, r25	; 0x04
    1134:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	9e 83       	std	Y+6, r25	; 0x06
    113e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1140:	8d 81       	ldd	r24, Y+5	; 0x05
    1142:	9e 81       	ldd	r25, Y+6	; 0x06
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	69 f7       	brne	.-38     	; 0x1122 <LCD_command+0x1a4>
    1148:	14 c0       	rjmp	.+40     	; 0x1172 <LCD_command+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114a:	6f 81       	ldd	r22, Y+7	; 0x07
    114c:	78 85       	ldd	r23, Y+8	; 0x08
    114e:	89 85       	ldd	r24, Y+9	; 0x09
    1150:	9a 85       	ldd	r25, Y+10	; 0x0a
    1152:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	9e 83       	std	Y+6, r25	; 0x06
    115c:	8d 83       	std	Y+5, r24	; 0x05
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	f1 f7       	brne	.-4      	; 0x116a <LCD_command+0x1ec>
    116e:	9a 83       	std	Y+2, r25	; 0x02
    1170:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms ( 40 ) ;

}
    1172:	6d 96       	adiw	r28, 0x1d	; 29
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <LCD_data>:

// Data Sending Routine :

void LCD_data ( unsigned char a ) {
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	6d 97       	sbiw	r28, 0x1d	; 29
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	8d 8f       	std	Y+29, r24	; 0x1d

    Data = a ;
    119a:	e5 e3       	ldi	r30, 0x35	; 53
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a0:	80 83       	st	Z, r24
    Command = (1<<RS) | (1<<E) ;
    11a2:	e2 e3       	ldi	r30, 0x32	; 50
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 ec       	ldi	r24, 0xC0	; 192
    11a8:	80 83       	st	Z, r24
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a0 e8       	ldi	r26, 0x80	; 128
    11b0:	bf e3       	ldi	r27, 0x3F	; 63
    11b2:	89 8f       	std	Y+25, r24	; 0x19
    11b4:	9a 8f       	std	Y+26, r25	; 0x1a
    11b6:	ab 8f       	std	Y+27, r26	; 0x1b
    11b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ba:	69 8d       	ldd	r22, Y+25	; 0x19
    11bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	4a e7       	ldi	r20, 0x7A	; 122
    11c8:	53 e4       	ldi	r21, 0x43	; 67
    11ca:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	8d 8b       	std	Y+21, r24	; 0x15
    11d4:	9e 8b       	std	Y+22, r25	; 0x16
    11d6:	af 8b       	std	Y+23, r26	; 0x17
    11d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11da:	6d 89       	ldd	r22, Y+21	; 0x15
    11dc:	7e 89       	ldd	r23, Y+22	; 0x16
    11de:	8f 89       	ldd	r24, Y+23	; 0x17
    11e0:	98 8d       	ldd	r25, Y+24	; 0x18
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e8       	ldi	r20, 0x80	; 128
    11e8:	5f e3       	ldi	r21, 0x3F	; 63
    11ea:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	2c f4       	brge	.+10     	; 0x11fc <LCD_data+0x78>
		__ticks = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9c 8b       	std	Y+20, r25	; 0x14
    11f8:	8b 8b       	std	Y+19, r24	; 0x13
    11fa:	3f c0       	rjmp	.+126    	; 0x127a <LCD_data+0xf6>
	else if (__tmp > 65535)
    11fc:	6d 89       	ldd	r22, Y+21	; 0x15
    11fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1200:	8f 89       	ldd	r24, Y+23	; 0x17
    1202:	98 8d       	ldd	r25, Y+24	; 0x18
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	3f ef       	ldi	r19, 0xFF	; 255
    1208:	4f e7       	ldi	r20, 0x7F	; 127
    120a:	57 e4       	ldi	r21, 0x47	; 71
    120c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
    1210:	18 16       	cp	r1, r24
    1212:	4c f5       	brge	.+82     	; 0x1266 <LCD_data+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1214:	69 8d       	ldd	r22, Y+25	; 0x19
    1216:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1218:	8b 8d       	ldd	r24, Y+27	; 0x1b
    121a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e2       	ldi	r20, 0x20	; 32
    1222:	51 e4       	ldi	r21, 0x41	; 65
    1224:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	9c 8b       	std	Y+20, r25	; 0x14
    123a:	8b 8b       	std	Y+19, r24	; 0x13
    123c:	0f c0       	rjmp	.+30     	; 0x125c <LCD_data+0xd8>
    123e:	89 e1       	ldi	r24, 0x19	; 25
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9a 8b       	std	Y+18, r25	; 0x12
    1244:	89 8b       	std	Y+17, r24	; 0x11
    1246:	89 89       	ldd	r24, Y+17	; 0x11
    1248:	9a 89       	ldd	r25, Y+18	; 0x12
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <LCD_data+0xc6>
    124e:	9a 8b       	std	Y+18, r25	; 0x12
    1250:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1252:	8b 89       	ldd	r24, Y+19	; 0x13
    1254:	9c 89       	ldd	r25, Y+20	; 0x14
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	9c 8b       	std	Y+20, r25	; 0x14
    125a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125c:	8b 89       	ldd	r24, Y+19	; 0x13
    125e:	9c 89       	ldd	r25, Y+20	; 0x14
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	69 f7       	brne	.-38     	; 0x123e <LCD_data+0xba>
    1264:	14 c0       	rjmp	.+40     	; 0x128e <LCD_data+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1266:	6d 89       	ldd	r22, Y+21	; 0x15
    1268:	7e 89       	ldd	r23, Y+22	; 0x16
    126a:	8f 89       	ldd	r24, Y+23	; 0x17
    126c:	98 8d       	ldd	r25, Y+24	; 0x18
    126e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9c 8b       	std	Y+20, r25	; 0x14
    1278:	8b 8b       	std	Y+19, r24	; 0x13
    127a:	8b 89       	ldd	r24, Y+19	; 0x13
    127c:	9c 89       	ldd	r25, Y+20	; 0x14
    127e:	98 8b       	std	Y+16, r25	; 0x10
    1280:	8f 87       	std	Y+15, r24	; 0x0f
    1282:	8f 85       	ldd	r24, Y+15	; 0x0f
    1284:	98 89       	ldd	r25, Y+16	; 0x10
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <LCD_data+0x102>
    128a:	98 8b       	std	Y+16, r25	; 0x10
    128c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms (1) ;
    Command = (1<<RS) | (0<<E) ;
    128e:	e2 e3       	ldi	r30, 0x32	; 50
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 e4       	ldi	r24, 0x40	; 64
    1294:	80 83       	st	Z, r24
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a0 e2       	ldi	r26, 0x20	; 32
    129c:	b2 e4       	ldi	r27, 0x42	; 66
    129e:	8b 87       	std	Y+11, r24	; 0x0b
    12a0:	9c 87       	std	Y+12, r25	; 0x0c
    12a2:	ad 87       	std	Y+13, r26	; 0x0d
    12a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4a e7       	ldi	r20, 0x7A	; 122
    12b4:	53 e4       	ldi	r21, 0x43	; 67
    12b6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	8f 83       	std	Y+7, r24	; 0x07
    12c0:	98 87       	std	Y+8, r25	; 0x08
    12c2:	a9 87       	std	Y+9, r26	; 0x09
    12c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e8       	ldi	r20, 0x80	; 128
    12d4:	5f e3       	ldi	r21, 0x3F	; 63
    12d6:	0e 94 ef 09 	call	0x13de	; 0x13de <__cmpsf2>
    12da:	88 23       	and	r24, r24
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <LCD_data+0x164>
		__ticks = 1;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
    12e6:	3f c0       	rjmp	.+126    	; 0x1366 <LCD_data+0x1e2>
	else if (__tmp > 65535)
    12e8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ea:	78 85       	ldd	r23, Y+8	; 0x08
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	3f ef       	ldi	r19, 0xFF	; 255
    12f4:	4f e7       	ldi	r20, 0x7F	; 127
    12f6:	57 e4       	ldi	r21, 0x47	; 71
    12f8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
    12fc:	18 16       	cp	r1, r24
    12fe:	4c f5       	brge	.+82     	; 0x1352 <LCD_data+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1300:	6b 85       	ldd	r22, Y+11	; 0x0b
    1302:	7c 85       	ldd	r23, Y+12	; 0x0c
    1304:	8d 85       	ldd	r24, Y+13	; 0x0d
    1306:	9e 85       	ldd	r25, Y+14	; 0x0e
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e2       	ldi	r20, 0x20	; 32
    130e:	51 e4       	ldi	r21, 0x41	; 65
    1310:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	0f c0       	rjmp	.+30     	; 0x1348 <LCD_data+0x1c4>
    132a:	89 e1       	ldi	r24, 0x19	; 25
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	9c 83       	std	Y+4, r25	; 0x04
    1330:	8b 83       	std	Y+3, r24	; 0x03
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <LCD_data+0x1b2>
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	69 f7       	brne	.-38     	; 0x132a <LCD_data+0x1a6>
    1350:	14 c0       	rjmp	.+40     	; 0x137a <LCD_data+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1352:	6f 81       	ldd	r22, Y+7	; 0x07
    1354:	78 85       	ldd	r23, Y+8	; 0x08
    1356:	89 85       	ldd	r24, Y+9	; 0x09
    1358:	9a 85       	ldd	r25, Y+10	; 0x0a
    135a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <LCD_data+0x1ee>
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms ( 40 ) ;
}
    137a:	6d 96       	adiw	r28, 0x1d	; 29
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <LCD_print>:


// Data Printing Routine :

void LCD_print ( char *a) {
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <LCD_print+0x6>
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	9b 83       	std	Y+3, r25	; 0x03
    139a:	8a 83       	std	Y+2, r24	; 0x02

    unsigned char i = 0 ;
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	0e c0       	rjmp	.+28     	; 0x13bc <LCD_print+0x30>
    for (; a[i]!='\0' ; i++)      LCD_data( a[i] ) ;
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	9b 81       	ldd	r25, Y+3	; 0x03
    13aa:	fc 01       	movw	r30, r24
    13ac:	e2 0f       	add	r30, r18
    13ae:	f3 1f       	adc	r31, r19
    13b0:	80 81       	ld	r24, Z
    13b2:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_data>
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	8f 5f       	subi	r24, 0xFF	; 255
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	9b 81       	ldd	r25, Y+3	; 0x03
    13c6:	fc 01       	movw	r30, r24
    13c8:	e2 0f       	add	r30, r18
    13ca:	f3 1f       	adc	r31, r19
    13cc:	80 81       	ld	r24, Z
    13ce:	88 23       	and	r24, r24
    13d0:	39 f7       	brne	.-50     	; 0x13a0 <LCD_print+0x14>
}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <__cmpsf2>:
    13de:	2f d0       	rcall	.+94     	; 0x143e <__fp_cmp>
    13e0:	08 f4       	brcc	.+2      	; 0x13e4 <__cmpsf2+0x6>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	08 95       	ret

000013e6 <__fixunssfsi>:
    13e6:	57 d0       	rcall	.+174    	; 0x1496 <__fp_splitA>
    13e8:	88 f0       	brcs	.+34     	; 0x140c <__fixunssfsi+0x26>
    13ea:	9f 57       	subi	r25, 0x7F	; 127
    13ec:	90 f0       	brcs	.+36     	; 0x1412 <__fixunssfsi+0x2c>
    13ee:	b9 2f       	mov	r27, r25
    13f0:	99 27       	eor	r25, r25
    13f2:	b7 51       	subi	r27, 0x17	; 23
    13f4:	a0 f0       	brcs	.+40     	; 0x141e <__fixunssfsi+0x38>
    13f6:	d1 f0       	breq	.+52     	; 0x142c <__fixunssfsi+0x46>
    13f8:	66 0f       	add	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	1a f0       	brmi	.+6      	; 0x1408 <__fixunssfsi+0x22>
    1402:	ba 95       	dec	r27
    1404:	c9 f7       	brne	.-14     	; 0x13f8 <__fixunssfsi+0x12>
    1406:	12 c0       	rjmp	.+36     	; 0x142c <__fixunssfsi+0x46>
    1408:	b1 30       	cpi	r27, 0x01	; 1
    140a:	81 f0       	breq	.+32     	; 0x142c <__fixunssfsi+0x46>
    140c:	5e d0       	rcall	.+188    	; 0x14ca <__fp_zero>
    140e:	b1 e0       	ldi	r27, 0x01	; 1
    1410:	08 95       	ret
    1412:	5b c0       	rjmp	.+182    	; 0x14ca <__fp_zero>
    1414:	67 2f       	mov	r22, r23
    1416:	78 2f       	mov	r23, r24
    1418:	88 27       	eor	r24, r24
    141a:	b8 5f       	subi	r27, 0xF8	; 248
    141c:	39 f0       	breq	.+14     	; 0x142c <__fixunssfsi+0x46>
    141e:	b9 3f       	cpi	r27, 0xF9	; 249
    1420:	cc f3       	brlt	.-14     	; 0x1414 <__fixunssfsi+0x2e>
    1422:	86 95       	lsr	r24
    1424:	77 95       	ror	r23
    1426:	67 95       	ror	r22
    1428:	b3 95       	inc	r27
    142a:	d9 f7       	brne	.-10     	; 0x1422 <__fixunssfsi+0x3c>
    142c:	3e f4       	brtc	.+14     	; 0x143c <__fixunssfsi+0x56>
    142e:	90 95       	com	r25
    1430:	80 95       	com	r24
    1432:	70 95       	com	r23
    1434:	61 95       	neg	r22
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	08 95       	ret

0000143e <__fp_cmp>:
    143e:	99 0f       	add	r25, r25
    1440:	00 08       	sbc	r0, r0
    1442:	55 0f       	add	r21, r21
    1444:	aa 0b       	sbc	r26, r26
    1446:	e0 e8       	ldi	r30, 0x80	; 128
    1448:	fe ef       	ldi	r31, 0xFE	; 254
    144a:	16 16       	cp	r1, r22
    144c:	17 06       	cpc	r1, r23
    144e:	e8 07       	cpc	r30, r24
    1450:	f9 07       	cpc	r31, r25
    1452:	c0 f0       	brcs	.+48     	; 0x1484 <__fp_cmp+0x46>
    1454:	12 16       	cp	r1, r18
    1456:	13 06       	cpc	r1, r19
    1458:	e4 07       	cpc	r30, r20
    145a:	f5 07       	cpc	r31, r21
    145c:	98 f0       	brcs	.+38     	; 0x1484 <__fp_cmp+0x46>
    145e:	62 1b       	sub	r22, r18
    1460:	73 0b       	sbc	r23, r19
    1462:	84 0b       	sbc	r24, r20
    1464:	95 0b       	sbc	r25, r21
    1466:	39 f4       	brne	.+14     	; 0x1476 <__fp_cmp+0x38>
    1468:	0a 26       	eor	r0, r26
    146a:	61 f0       	breq	.+24     	; 0x1484 <__fp_cmp+0x46>
    146c:	23 2b       	or	r18, r19
    146e:	24 2b       	or	r18, r20
    1470:	25 2b       	or	r18, r21
    1472:	21 f4       	brne	.+8      	; 0x147c <__fp_cmp+0x3e>
    1474:	08 95       	ret
    1476:	0a 26       	eor	r0, r26
    1478:	09 f4       	brne	.+2      	; 0x147c <__fp_cmp+0x3e>
    147a:	a1 40       	sbci	r26, 0x01	; 1
    147c:	a6 95       	lsr	r26
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	81 1d       	adc	r24, r1
    1482:	81 1d       	adc	r24, r1
    1484:	08 95       	ret

00001486 <__fp_split3>:
    1486:	57 fd       	sbrc	r21, 7
    1488:	90 58       	subi	r25, 0x80	; 128
    148a:	44 0f       	add	r20, r20
    148c:	55 1f       	adc	r21, r21
    148e:	59 f0       	breq	.+22     	; 0x14a6 <__fp_splitA+0x10>
    1490:	5f 3f       	cpi	r21, 0xFF	; 255
    1492:	71 f0       	breq	.+28     	; 0x14b0 <__fp_splitA+0x1a>
    1494:	47 95       	ror	r20

00001496 <__fp_splitA>:
    1496:	88 0f       	add	r24, r24
    1498:	97 fb       	bst	r25, 7
    149a:	99 1f       	adc	r25, r25
    149c:	61 f0       	breq	.+24     	; 0x14b6 <__fp_splitA+0x20>
    149e:	9f 3f       	cpi	r25, 0xFF	; 255
    14a0:	79 f0       	breq	.+30     	; 0x14c0 <__fp_splitA+0x2a>
    14a2:	87 95       	ror	r24
    14a4:	08 95       	ret
    14a6:	12 16       	cp	r1, r18
    14a8:	13 06       	cpc	r1, r19
    14aa:	14 06       	cpc	r1, r20
    14ac:	55 1f       	adc	r21, r21
    14ae:	f2 cf       	rjmp	.-28     	; 0x1494 <__fp_split3+0xe>
    14b0:	46 95       	lsr	r20
    14b2:	f1 df       	rcall	.-30     	; 0x1496 <__fp_splitA>
    14b4:	08 c0       	rjmp	.+16     	; 0x14c6 <__fp_splitA+0x30>
    14b6:	16 16       	cp	r1, r22
    14b8:	17 06       	cpc	r1, r23
    14ba:	18 06       	cpc	r1, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	f1 cf       	rjmp	.-30     	; 0x14a2 <__fp_splitA+0xc>
    14c0:	86 95       	lsr	r24
    14c2:	71 05       	cpc	r23, r1
    14c4:	61 05       	cpc	r22, r1
    14c6:	08 94       	sec
    14c8:	08 95       	ret

000014ca <__fp_zero>:
    14ca:	e8 94       	clt

000014cc <__fp_szero>:
    14cc:	bb 27       	eor	r27, r27
    14ce:	66 27       	eor	r22, r22
    14d0:	77 27       	eor	r23, r23
    14d2:	cb 01       	movw	r24, r22
    14d4:	97 f9       	bld	r25, 7
    14d6:	08 95       	ret

000014d8 <__gesf2>:
    14d8:	b2 df       	rcall	.-156    	; 0x143e <__fp_cmp>
    14da:	08 f4       	brcc	.+2      	; 0x14de <__gesf2+0x6>
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	08 95       	ret

000014e0 <__mulsf3>:
    14e0:	0b d0       	rcall	.+22     	; 0x14f8 <__mulsf3x>
    14e2:	78 c0       	rjmp	.+240    	; 0x15d4 <__fp_round>
    14e4:	69 d0       	rcall	.+210    	; 0x15b8 <__fp_pscA>
    14e6:	28 f0       	brcs	.+10     	; 0x14f2 <__mulsf3+0x12>
    14e8:	6e d0       	rcall	.+220    	; 0x15c6 <__fp_pscB>
    14ea:	18 f0       	brcs	.+6      	; 0x14f2 <__mulsf3+0x12>
    14ec:	95 23       	and	r25, r21
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <__mulsf3+0x12>
    14f0:	5a c0       	rjmp	.+180    	; 0x15a6 <__fp_inf>
    14f2:	5f c0       	rjmp	.+190    	; 0x15b2 <__fp_nan>
    14f4:	11 24       	eor	r1, r1
    14f6:	ea cf       	rjmp	.-44     	; 0x14cc <__fp_szero>

000014f8 <__mulsf3x>:
    14f8:	c6 df       	rcall	.-116    	; 0x1486 <__fp_split3>
    14fa:	a0 f3       	brcs	.-24     	; 0x14e4 <__mulsf3+0x4>

000014fc <__mulsf3_pse>:
    14fc:	95 9f       	mul	r25, r21
    14fe:	d1 f3       	breq	.-12     	; 0x14f4 <__mulsf3+0x14>
    1500:	95 0f       	add	r25, r21
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	55 1f       	adc	r21, r21
    1506:	62 9f       	mul	r22, r18
    1508:	f0 01       	movw	r30, r0
    150a:	72 9f       	mul	r23, r18
    150c:	bb 27       	eor	r27, r27
    150e:	f0 0d       	add	r31, r0
    1510:	b1 1d       	adc	r27, r1
    1512:	63 9f       	mul	r22, r19
    1514:	aa 27       	eor	r26, r26
    1516:	f0 0d       	add	r31, r0
    1518:	b1 1d       	adc	r27, r1
    151a:	aa 1f       	adc	r26, r26
    151c:	64 9f       	mul	r22, r20
    151e:	66 27       	eor	r22, r22
    1520:	b0 0d       	add	r27, r0
    1522:	a1 1d       	adc	r26, r1
    1524:	66 1f       	adc	r22, r22
    1526:	82 9f       	mul	r24, r18
    1528:	22 27       	eor	r18, r18
    152a:	b0 0d       	add	r27, r0
    152c:	a1 1d       	adc	r26, r1
    152e:	62 1f       	adc	r22, r18
    1530:	73 9f       	mul	r23, r19
    1532:	b0 0d       	add	r27, r0
    1534:	a1 1d       	adc	r26, r1
    1536:	62 1f       	adc	r22, r18
    1538:	83 9f       	mul	r24, r19
    153a:	a0 0d       	add	r26, r0
    153c:	61 1d       	adc	r22, r1
    153e:	22 1f       	adc	r18, r18
    1540:	74 9f       	mul	r23, r20
    1542:	33 27       	eor	r19, r19
    1544:	a0 0d       	add	r26, r0
    1546:	61 1d       	adc	r22, r1
    1548:	23 1f       	adc	r18, r19
    154a:	84 9f       	mul	r24, r20
    154c:	60 0d       	add	r22, r0
    154e:	21 1d       	adc	r18, r1
    1550:	82 2f       	mov	r24, r18
    1552:	76 2f       	mov	r23, r22
    1554:	6a 2f       	mov	r22, r26
    1556:	11 24       	eor	r1, r1
    1558:	9f 57       	subi	r25, 0x7F	; 127
    155a:	50 40       	sbci	r21, 0x00	; 0
    155c:	8a f0       	brmi	.+34     	; 0x1580 <__mulsf3_pse+0x84>
    155e:	e1 f0       	breq	.+56     	; 0x1598 <__mulsf3_pse+0x9c>
    1560:	88 23       	and	r24, r24
    1562:	4a f0       	brmi	.+18     	; 0x1576 <__mulsf3_pse+0x7a>
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	bb 1f       	adc	r27, r27
    156a:	66 1f       	adc	r22, r22
    156c:	77 1f       	adc	r23, r23
    156e:	88 1f       	adc	r24, r24
    1570:	91 50       	subi	r25, 0x01	; 1
    1572:	50 40       	sbci	r21, 0x00	; 0
    1574:	a9 f7       	brne	.-22     	; 0x1560 <__mulsf3_pse+0x64>
    1576:	9e 3f       	cpi	r25, 0xFE	; 254
    1578:	51 05       	cpc	r21, r1
    157a:	70 f0       	brcs	.+28     	; 0x1598 <__mulsf3_pse+0x9c>
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <__fp_inf>
    157e:	a6 cf       	rjmp	.-180    	; 0x14cc <__fp_szero>
    1580:	5f 3f       	cpi	r21, 0xFF	; 255
    1582:	ec f3       	brlt	.-6      	; 0x157e <__mulsf3_pse+0x82>
    1584:	98 3e       	cpi	r25, 0xE8	; 232
    1586:	dc f3       	brlt	.-10     	; 0x157e <__mulsf3_pse+0x82>
    1588:	86 95       	lsr	r24
    158a:	77 95       	ror	r23
    158c:	67 95       	ror	r22
    158e:	b7 95       	ror	r27
    1590:	f7 95       	ror	r31
    1592:	e7 95       	ror	r30
    1594:	9f 5f       	subi	r25, 0xFF	; 255
    1596:	c1 f7       	brne	.-16     	; 0x1588 <__mulsf3_pse+0x8c>
    1598:	fe 2b       	or	r31, r30
    159a:	88 0f       	add	r24, r24
    159c:	91 1d       	adc	r25, r1
    159e:	96 95       	lsr	r25
    15a0:	87 95       	ror	r24
    15a2:	97 f9       	bld	r25, 7
    15a4:	08 95       	ret

000015a6 <__fp_inf>:
    15a6:	97 f9       	bld	r25, 7
    15a8:	9f 67       	ori	r25, 0x7F	; 127
    15aa:	80 e8       	ldi	r24, 0x80	; 128
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	08 95       	ret

000015b2 <__fp_nan>:
    15b2:	9f ef       	ldi	r25, 0xFF	; 255
    15b4:	80 ec       	ldi	r24, 0xC0	; 192
    15b6:	08 95       	ret

000015b8 <__fp_pscA>:
    15b8:	00 24       	eor	r0, r0
    15ba:	0a 94       	dec	r0
    15bc:	16 16       	cp	r1, r22
    15be:	17 06       	cpc	r1, r23
    15c0:	18 06       	cpc	r1, r24
    15c2:	09 06       	cpc	r0, r25
    15c4:	08 95       	ret

000015c6 <__fp_pscB>:
    15c6:	00 24       	eor	r0, r0
    15c8:	0a 94       	dec	r0
    15ca:	12 16       	cp	r1, r18
    15cc:	13 06       	cpc	r1, r19
    15ce:	14 06       	cpc	r1, r20
    15d0:	05 06       	cpc	r0, r21
    15d2:	08 95       	ret

000015d4 <__fp_round>:
    15d4:	09 2e       	mov	r0, r25
    15d6:	03 94       	inc	r0
    15d8:	00 0c       	add	r0, r0
    15da:	11 f4       	brne	.+4      	; 0x15e0 <__fp_round+0xc>
    15dc:	88 23       	and	r24, r24
    15de:	52 f0       	brmi	.+20     	; 0x15f4 <__fp_round+0x20>
    15e0:	bb 0f       	add	r27, r27
    15e2:	40 f4       	brcc	.+16     	; 0x15f4 <__fp_round+0x20>
    15e4:	bf 2b       	or	r27, r31
    15e6:	11 f4       	brne	.+4      	; 0x15ec <__fp_round+0x18>
    15e8:	60 ff       	sbrs	r22, 0
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <__fp_round+0x20>
    15ec:	6f 5f       	subi	r22, 0xFF	; 255
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	8f 4f       	sbci	r24, 0xFF	; 255
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	08 95       	ret

000015f6 <_exit>:
    15f6:	f8 94       	cli

000015f8 <__stop_program>:
    15f8:	ff cf       	rjmp	.-2      	; 0x15f8 <__stop_program>
