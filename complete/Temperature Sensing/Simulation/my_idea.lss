
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000117a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000117a  000011ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000fc0  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000793  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 41 00 	call	0x82	; 0x82 <main>
      7a:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:


// main function :


int main                ( ) {
      82:	df 93       	push	r29
      84:	cf 93       	push	r28
      86:	0f 92       	push	r0
      88:	cd b7       	in	r28, 0x3d	; 61
      8a:	de b7       	in	r29, 0x3e	; 62

    Initialization      ( ) ;// lcd and adc
      8c:	0e 94 5e 00 	call	0xbc	; 0xbc <Initialization>
    LCD                 ( "Starting..." ) ;
      90:	80 e6       	ldi	r24, 0x60	; 96
      92:	90 e0       	ldi	r25, 0x00	; 0
      94:	0e 94 aa 06 	call	0xd54	; 0xd54 <LCD>
    Commandfunction(0xc3) ;
      98:	83 ec       	ldi	r24, 0xC3	; 195
      9a:	0e 94 a2 03 	call	0x744	; 0x744 <Commandfunction>
    // Second line , 3rd character

    while ( 1 ) {
        Commandfunction (0x01) ;
      9e:	81 e0       	ldi	r24, 0x01	; 1
      a0:	0e 94 a2 03 	call	0x744	; 0x744 <Commandfunction>
        unsigned char variable = 0 ;
      a4:	19 82       	std	Y+1, r1	; 0x01
      a6:	06 c0       	rjmp	.+12     	; 0xb4 <main+0x32>
        for ( ; variable < 10 ; variable++)
        		Operation           (variable) ;
      a8:	89 81       	ldd	r24, Y+1	; 0x01
      aa:	0e 94 f5 06 	call	0xdea	; 0xdea <Operation>
    // Second line , 3rd character

    while ( 1 ) {
        Commandfunction (0x01) ;
        unsigned char variable = 0 ;
        for ( ; variable < 10 ; variable++)
      ae:	89 81       	ldd	r24, Y+1	; 0x01
      b0:	8f 5f       	subi	r24, 0xFF	; 255
      b2:	89 83       	std	Y+1, r24	; 0x01
      b4:	89 81       	ldd	r24, Y+1	; 0x01
      b6:	8a 30       	cpi	r24, 0x0A	; 10
      b8:	b8 f3       	brcs	.-18     	; 0xa8 <main+0x26>
      ba:	f1 cf       	rjmp	.-30     	; 0x9e <main+0x1c>

000000bc <Initialization>:


// function definition :


void Initialization     ( ) {
      bc:	0f 93       	push	r16
      be:	1f 93       	push	r17
      c0:	df 93       	push	r29
      c2:	cf 93       	push	r28
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	c6 55       	subi	r28, 0x56	; 86
      ca:	d0 40       	sbci	r29, 0x00	; 0
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61

    Data_direction = 0xFF ;
      d6:	e4 e3       	ldi	r30, 0x34	; 52
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	8f ef       	ldi	r24, 0xFF	; 255
      dc:	80 83       	st	Z, r24
    Command_direction = 0xFF ;
      de:	e1 e3       	ldi	r30, 0x31	; 49
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	8f ef       	ldi	r24, 0xFF	; 255
      e4:	80 83       	st	Z, r24
    ADC_direction &= 0<<ADC_Pin ;
      e6:	e9 e3       	ldi	r30, 0x39	; 57
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	ea e3       	ldi	r30, 0x3A	; 58
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	ea e3       	ldi	r30, 0x3A	; 58
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	10 82       	st	Z, r1

    ADMUX  = (1<<REFS1) | (1<<REFS0) | (1<<ADLAR) ; // 0xE0
      f8:	e7 e2       	ldi	r30, 0x27	; 39
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 ee       	ldi	r24, 0xE0	; 224
      fe:	80 83       	st	Z, r24
    ADCSRA = (1<<ADEN)  | (1<<ADPS2) | (1<<ADPS1) ; // clk/4
     100:	e6 e2       	ldi	r30, 0x26	; 38
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	86 e8       	ldi	r24, 0x86	; 134
     106:	80 83       	st	Z, r24

    Commandfunction     ( 0x33 ) ;
     108:	83 e3       	ldi	r24, 0x33	; 51
     10a:	0e 94 a2 03 	call	0x744	; 0x744 <Commandfunction>
     10e:	fe 01       	movw	r30, r28
     110:	ef 5a       	subi	r30, 0xAF	; 175
     112:	ff 4f       	sbci	r31, 0xFF	; 255
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	a0 e8       	ldi	r26, 0x80	; 128
     11a:	bf e3       	ldi	r27, 0x3F	; 63
     11c:	80 83       	st	Z, r24
     11e:	91 83       	std	Z+1, r25	; 0x01
     120:	a2 83       	std	Z+2, r26	; 0x02
     122:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     124:	8e 01       	movw	r16, r28
     126:	03 5b       	subi	r16, 0xB3	; 179
     128:	1f 4f       	sbci	r17, 0xFF	; 255
     12a:	fe 01       	movw	r30, r28
     12c:	ef 5a       	subi	r30, 0xAF	; 175
     12e:	ff 4f       	sbci	r31, 0xFF	; 255
     130:	60 81       	ld	r22, Z
     132:	71 81       	ldd	r23, Z+1	; 0x01
     134:	82 81       	ldd	r24, Z+2	; 0x02
     136:	93 81       	ldd	r25, Z+3	; 0x03
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	4a e7       	ldi	r20, 0x7A	; 122
     13e:	53 e4       	ldi	r21, 0x43	; 67
     140:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     144:	dc 01       	movw	r26, r24
     146:	cb 01       	movw	r24, r22
     148:	f8 01       	movw	r30, r16
     14a:	80 83       	st	Z, r24
     14c:	91 83       	std	Z+1, r25	; 0x01
     14e:	a2 83       	std	Z+2, r26	; 0x02
     150:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     152:	fe 01       	movw	r30, r28
     154:	e3 5b       	subi	r30, 0xB3	; 179
     156:	ff 4f       	sbci	r31, 0xFF	; 255
     158:	60 81       	ld	r22, Z
     15a:	71 81       	ldd	r23, Z+1	; 0x01
     15c:	82 81       	ldd	r24, Z+2	; 0x02
     15e:	93 81       	ldd	r25, Z+3	; 0x03
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 e8       	ldi	r20, 0x80	; 128
     166:	5f e3       	ldi	r21, 0x3F	; 63
     168:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     16c:	88 23       	and	r24, r24
     16e:	44 f4       	brge	.+16     	; 0x180 <Initialization+0xc4>
		__ticks = 1;
     170:	fe 01       	movw	r30, r28
     172:	e5 5b       	subi	r30, 0xB5	; 181
     174:	ff 4f       	sbci	r31, 0xFF	; 255
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	91 83       	std	Z+1, r25	; 0x01
     17c:	80 83       	st	Z, r24
     17e:	64 c0       	rjmp	.+200    	; 0x248 <Initialization+0x18c>
	else if (__tmp > 65535)
     180:	fe 01       	movw	r30, r28
     182:	e3 5b       	subi	r30, 0xB3	; 179
     184:	ff 4f       	sbci	r31, 0xFF	; 255
     186:	60 81       	ld	r22, Z
     188:	71 81       	ldd	r23, Z+1	; 0x01
     18a:	82 81       	ldd	r24, Z+2	; 0x02
     18c:	93 81       	ldd	r25, Z+3	; 0x03
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	3f ef       	ldi	r19, 0xFF	; 255
     192:	4f e7       	ldi	r20, 0x7F	; 127
     194:	57 e4       	ldi	r21, 0x47	; 71
     196:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     19a:	18 16       	cp	r1, r24
     19c:	0c f0       	brlt	.+2      	; 0x1a0 <Initialization+0xe4>
     19e:	43 c0       	rjmp	.+134    	; 0x226 <Initialization+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1a0:	fe 01       	movw	r30, r28
     1a2:	ef 5a       	subi	r30, 0xAF	; 175
     1a4:	ff 4f       	sbci	r31, 0xFF	; 255
     1a6:	60 81       	ld	r22, Z
     1a8:	71 81       	ldd	r23, Z+1	; 0x01
     1aa:	82 81       	ldd	r24, Z+2	; 0x02
     1ac:	93 81       	ldd	r25, Z+3	; 0x03
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e2       	ldi	r20, 0x20	; 32
     1b4:	51 e4       	ldi	r21, 0x41	; 65
     1b6:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     1ba:	dc 01       	movw	r26, r24
     1bc:	cb 01       	movw	r24, r22
     1be:	8e 01       	movw	r16, r28
     1c0:	05 5b       	subi	r16, 0xB5	; 181
     1c2:	1f 4f       	sbci	r17, 0xFF	; 255
     1c4:	bc 01       	movw	r22, r24
     1c6:	cd 01       	movw	r24, r26
     1c8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     1cc:	dc 01       	movw	r26, r24
     1ce:	cb 01       	movw	r24, r22
     1d0:	f8 01       	movw	r30, r16
     1d2:	91 83       	std	Z+1, r25	; 0x01
     1d4:	80 83       	st	Z, r24
     1d6:	1f c0       	rjmp	.+62     	; 0x216 <Initialization+0x15a>
     1d8:	fe 01       	movw	r30, r28
     1da:	e7 5b       	subi	r30, 0xB7	; 183
     1dc:	ff 4f       	sbci	r31, 0xFF	; 255
     1de:	89 e1       	ldi	r24, 0x19	; 25
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	91 83       	std	Z+1, r25	; 0x01
     1e4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1e6:	fe 01       	movw	r30, r28
     1e8:	e7 5b       	subi	r30, 0xB7	; 183
     1ea:	ff 4f       	sbci	r31, 0xFF	; 255
     1ec:	80 81       	ld	r24, Z
     1ee:	91 81       	ldd	r25, Z+1	; 0x01
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <Initialization+0x134>
     1f4:	fe 01       	movw	r30, r28
     1f6:	e7 5b       	subi	r30, 0xB7	; 183
     1f8:	ff 4f       	sbci	r31, 0xFF	; 255
     1fa:	91 83       	std	Z+1, r25	; 0x01
     1fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1fe:	de 01       	movw	r26, r28
     200:	a5 5b       	subi	r26, 0xB5	; 181
     202:	bf 4f       	sbci	r27, 0xFF	; 255
     204:	fe 01       	movw	r30, r28
     206:	e5 5b       	subi	r30, 0xB5	; 181
     208:	ff 4f       	sbci	r31, 0xFF	; 255
     20a:	80 81       	ld	r24, Z
     20c:	91 81       	ldd	r25, Z+1	; 0x01
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	11 96       	adiw	r26, 0x01	; 1
     212:	9c 93       	st	X, r25
     214:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     216:	fe 01       	movw	r30, r28
     218:	e5 5b       	subi	r30, 0xB5	; 181
     21a:	ff 4f       	sbci	r31, 0xFF	; 255
     21c:	80 81       	ld	r24, Z
     21e:	91 81       	ldd	r25, Z+1	; 0x01
     220:	00 97       	sbiw	r24, 0x00	; 0
     222:	d1 f6       	brne	.-76     	; 0x1d8 <Initialization+0x11c>
     224:	27 c0       	rjmp	.+78     	; 0x274 <Initialization+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     226:	8e 01       	movw	r16, r28
     228:	05 5b       	subi	r16, 0xB5	; 181
     22a:	1f 4f       	sbci	r17, 0xFF	; 255
     22c:	fe 01       	movw	r30, r28
     22e:	e3 5b       	subi	r30, 0xB3	; 179
     230:	ff 4f       	sbci	r31, 0xFF	; 255
     232:	60 81       	ld	r22, Z
     234:	71 81       	ldd	r23, Z+1	; 0x01
     236:	82 81       	ldd	r24, Z+2	; 0x02
     238:	93 81       	ldd	r25, Z+3	; 0x03
     23a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	f8 01       	movw	r30, r16
     244:	91 83       	std	Z+1, r25	; 0x01
     246:	80 83       	st	Z, r24
     248:	de 01       	movw	r26, r28
     24a:	a9 5b       	subi	r26, 0xB9	; 185
     24c:	bf 4f       	sbci	r27, 0xFF	; 255
     24e:	fe 01       	movw	r30, r28
     250:	e5 5b       	subi	r30, 0xB5	; 181
     252:	ff 4f       	sbci	r31, 0xFF	; 255
     254:	80 81       	ld	r24, Z
     256:	91 81       	ldd	r25, Z+1	; 0x01
     258:	8d 93       	st	X+, r24
     25a:	9c 93       	st	X, r25
     25c:	fe 01       	movw	r30, r28
     25e:	e9 5b       	subi	r30, 0xB9	; 185
     260:	ff 4f       	sbci	r31, 0xFF	; 255
     262:	80 81       	ld	r24, Z
     264:	91 81       	ldd	r25, Z+1	; 0x01
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <Initialization+0x1aa>
     26a:	fe 01       	movw	r30, r28
     26c:	e9 5b       	subi	r30, 0xB9	; 185
     26e:	ff 4f       	sbci	r31, 0xFF	; 255
     270:	91 83       	std	Z+1, r25	; 0x01
     272:	80 83       	st	Z, r24
    // 4 bit mode is used
    _delay_ms           (1) ;

    Commandfunction     ( 0x32 ) ;
     274:	82 e3       	ldi	r24, 0x32	; 50
     276:	0e 94 a2 03 	call	0x744	; 0x744 <Commandfunction>
     27a:	fe 01       	movw	r30, r28
     27c:	ed 5b       	subi	r30, 0xBD	; 189
     27e:	ff 4f       	sbci	r31, 0xFF	; 255
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	a0 e8       	ldi	r26, 0x80	; 128
     286:	bf e3       	ldi	r27, 0x3F	; 63
     288:	80 83       	st	Z, r24
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	a2 83       	std	Z+2, r26	; 0x02
     28e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     290:	8e 01       	movw	r16, r28
     292:	01 5c       	subi	r16, 0xC1	; 193
     294:	1f 4f       	sbci	r17, 0xFF	; 255
     296:	fe 01       	movw	r30, r28
     298:	ed 5b       	subi	r30, 0xBD	; 189
     29a:	ff 4f       	sbci	r31, 0xFF	; 255
     29c:	60 81       	ld	r22, Z
     29e:	71 81       	ldd	r23, Z+1	; 0x01
     2a0:	82 81       	ldd	r24, Z+2	; 0x02
     2a2:	93 81       	ldd	r25, Z+3	; 0x03
     2a4:	20 e0       	ldi	r18, 0x00	; 0
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	4a e7       	ldi	r20, 0x7A	; 122
     2aa:	53 e4       	ldi	r21, 0x43	; 67
     2ac:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	f8 01       	movw	r30, r16
     2b6:	80 83       	st	Z, r24
     2b8:	91 83       	std	Z+1, r25	; 0x01
     2ba:	a2 83       	std	Z+2, r26	; 0x02
     2bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     2be:	fe 01       	movw	r30, r28
     2c0:	ff 96       	adiw	r30, 0x3f	; 63
     2c2:	60 81       	ld	r22, Z
     2c4:	71 81       	ldd	r23, Z+1	; 0x01
     2c6:	82 81       	ldd	r24, Z+2	; 0x02
     2c8:	93 81       	ldd	r25, Z+3	; 0x03
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	40 e8       	ldi	r20, 0x80	; 128
     2d0:	5f e3       	ldi	r21, 0x3F	; 63
     2d2:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     2d6:	88 23       	and	r24, r24
     2d8:	2c f4       	brge	.+10     	; 0x2e4 <Initialization+0x228>
		__ticks = 1;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	9e af       	std	Y+62, r25	; 0x3e
     2e0:	8d af       	std	Y+61, r24	; 0x3d
     2e2:	46 c0       	rjmp	.+140    	; 0x370 <Initialization+0x2b4>
	else if (__tmp > 65535)
     2e4:	fe 01       	movw	r30, r28
     2e6:	ff 96       	adiw	r30, 0x3f	; 63
     2e8:	60 81       	ld	r22, Z
     2ea:	71 81       	ldd	r23, Z+1	; 0x01
     2ec:	82 81       	ldd	r24, Z+2	; 0x02
     2ee:	93 81       	ldd	r25, Z+3	; 0x03
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	3f ef       	ldi	r19, 0xFF	; 255
     2f4:	4f e7       	ldi	r20, 0x7F	; 127
     2f6:	57 e4       	ldi	r21, 0x47	; 71
     2f8:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     2fc:	18 16       	cp	r1, r24
     2fe:	64 f5       	brge	.+88     	; 0x358 <Initialization+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     300:	fe 01       	movw	r30, r28
     302:	ed 5b       	subi	r30, 0xBD	; 189
     304:	ff 4f       	sbci	r31, 0xFF	; 255
     306:	60 81       	ld	r22, Z
     308:	71 81       	ldd	r23, Z+1	; 0x01
     30a:	82 81       	ldd	r24, Z+2	; 0x02
     30c:	93 81       	ldd	r25, Z+3	; 0x03
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e2       	ldi	r20, 0x20	; 32
     314:	51 e4       	ldi	r21, 0x41	; 65
     316:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     31a:	dc 01       	movw	r26, r24
     31c:	cb 01       	movw	r24, r22
     31e:	bc 01       	movw	r22, r24
     320:	cd 01       	movw	r24, r26
     322:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	9e af       	std	Y+62, r25	; 0x3e
     32c:	8d af       	std	Y+61, r24	; 0x3d
     32e:	0f c0       	rjmp	.+30     	; 0x34e <Initialization+0x292>
     330:	89 e1       	ldi	r24, 0x19	; 25
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	9c af       	std	Y+60, r25	; 0x3c
     336:	8b af       	std	Y+59, r24	; 0x3b
     338:	8b ad       	ldd	r24, Y+59	; 0x3b
     33a:	9c ad       	ldd	r25, Y+60	; 0x3c
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <Initialization+0x280>
     340:	9c af       	std	Y+60, r25	; 0x3c
     342:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     344:	8d ad       	ldd	r24, Y+61	; 0x3d
     346:	9e ad       	ldd	r25, Y+62	; 0x3e
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	9e af       	std	Y+62, r25	; 0x3e
     34c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34e:	8d ad       	ldd	r24, Y+61	; 0x3d
     350:	9e ad       	ldd	r25, Y+62	; 0x3e
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	69 f7       	brne	.-38     	; 0x330 <Initialization+0x274>
     356:	16 c0       	rjmp	.+44     	; 0x384 <Initialization+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     358:	fe 01       	movw	r30, r28
     35a:	ff 96       	adiw	r30, 0x3f	; 63
     35c:	60 81       	ld	r22, Z
     35e:	71 81       	ldd	r23, Z+1	; 0x01
     360:	82 81       	ldd	r24, Z+2	; 0x02
     362:	93 81       	ldd	r25, Z+3	; 0x03
     364:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     368:	dc 01       	movw	r26, r24
     36a:	cb 01       	movw	r24, r22
     36c:	9e af       	std	Y+62, r25	; 0x3e
     36e:	8d af       	std	Y+61, r24	; 0x3d
     370:	8d ad       	ldd	r24, Y+61	; 0x3d
     372:	9e ad       	ldd	r25, Y+62	; 0x3e
     374:	9a af       	std	Y+58, r25	; 0x3a
     376:	89 af       	std	Y+57, r24	; 0x39
     378:	89 ad       	ldd	r24, Y+57	; 0x39
     37a:	9a ad       	ldd	r25, Y+58	; 0x3a
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <Initialization+0x2c0>
     380:	9a af       	std	Y+58, r25	; 0x3a
     382:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms           (1) ;

    Commandfunction     ( 0x28 ) ;
     384:	88 e2       	ldi	r24, 0x28	; 40
     386:	0e 94 a2 03 	call	0x744	; 0x744 <Commandfunction>
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	a0 e8       	ldi	r26, 0x80	; 128
     390:	bf e3       	ldi	r27, 0x3F	; 63
     392:	8d ab       	std	Y+53, r24	; 0x35
     394:	9e ab       	std	Y+54, r25	; 0x36
     396:	af ab       	std	Y+55, r26	; 0x37
     398:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     39a:	6d a9       	ldd	r22, Y+53	; 0x35
     39c:	7e a9       	ldd	r23, Y+54	; 0x36
     39e:	8f a9       	ldd	r24, Y+55	; 0x37
     3a0:	98 ad       	ldd	r25, Y+56	; 0x38
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	4a e7       	ldi	r20, 0x7A	; 122
     3a8:	53 e4       	ldi	r21, 0x43	; 67
     3aa:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     3ae:	dc 01       	movw	r26, r24
     3b0:	cb 01       	movw	r24, r22
     3b2:	89 ab       	std	Y+49, r24	; 0x31
     3b4:	9a ab       	std	Y+50, r25	; 0x32
     3b6:	ab ab       	std	Y+51, r26	; 0x33
     3b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     3ba:	69 a9       	ldd	r22, Y+49	; 0x31
     3bc:	7a a9       	ldd	r23, Y+50	; 0x32
     3be:	8b a9       	ldd	r24, Y+51	; 0x33
     3c0:	9c a9       	ldd	r25, Y+52	; 0x34
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	40 e8       	ldi	r20, 0x80	; 128
     3c8:	5f e3       	ldi	r21, 0x3F	; 63
     3ca:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     3ce:	88 23       	and	r24, r24
     3d0:	2c f4       	brge	.+10     	; 0x3dc <Initialization+0x320>
		__ticks = 1;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	98 ab       	std	Y+48, r25	; 0x30
     3d8:	8f a7       	std	Y+47, r24	; 0x2f
     3da:	3f c0       	rjmp	.+126    	; 0x45a <Initialization+0x39e>
	else if (__tmp > 65535)
     3dc:	69 a9       	ldd	r22, Y+49	; 0x31
     3de:	7a a9       	ldd	r23, Y+50	; 0x32
     3e0:	8b a9       	ldd	r24, Y+51	; 0x33
     3e2:	9c a9       	ldd	r25, Y+52	; 0x34
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	3f ef       	ldi	r19, 0xFF	; 255
     3e8:	4f e7       	ldi	r20, 0x7F	; 127
     3ea:	57 e4       	ldi	r21, 0x47	; 71
     3ec:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     3f0:	18 16       	cp	r1, r24
     3f2:	4c f5       	brge	.+82     	; 0x446 <Initialization+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f4:	6d a9       	ldd	r22, Y+53	; 0x35
     3f6:	7e a9       	ldd	r23, Y+54	; 0x36
     3f8:	8f a9       	ldd	r24, Y+55	; 0x37
     3fa:	98 ad       	ldd	r25, Y+56	; 0x38
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e2       	ldi	r20, 0x20	; 32
     402:	51 e4       	ldi	r21, 0x41	; 65
     404:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     408:	dc 01       	movw	r26, r24
     40a:	cb 01       	movw	r24, r22
     40c:	bc 01       	movw	r22, r24
     40e:	cd 01       	movw	r24, r26
     410:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     414:	dc 01       	movw	r26, r24
     416:	cb 01       	movw	r24, r22
     418:	98 ab       	std	Y+48, r25	; 0x30
     41a:	8f a7       	std	Y+47, r24	; 0x2f
     41c:	0f c0       	rjmp	.+30     	; 0x43c <Initialization+0x380>
     41e:	89 e1       	ldi	r24, 0x19	; 25
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	9e a7       	std	Y+46, r25	; 0x2e
     424:	8d a7       	std	Y+45, r24	; 0x2d
     426:	8d a5       	ldd	r24, Y+45	; 0x2d
     428:	9e a5       	ldd	r25, Y+46	; 0x2e
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	f1 f7       	brne	.-4      	; 0x42a <Initialization+0x36e>
     42e:	9e a7       	std	Y+46, r25	; 0x2e
     430:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     432:	8f a5       	ldd	r24, Y+47	; 0x2f
     434:	98 a9       	ldd	r25, Y+48	; 0x30
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	98 ab       	std	Y+48, r25	; 0x30
     43a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     43c:	8f a5       	ldd	r24, Y+47	; 0x2f
     43e:	98 a9       	ldd	r25, Y+48	; 0x30
     440:	00 97       	sbiw	r24, 0x00	; 0
     442:	69 f7       	brne	.-38     	; 0x41e <Initialization+0x362>
     444:	14 c0       	rjmp	.+40     	; 0x46e <__stack+0xf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     446:	69 a9       	ldd	r22, Y+49	; 0x31
     448:	7a a9       	ldd	r23, Y+50	; 0x32
     44a:	8b a9       	ldd	r24, Y+51	; 0x33
     44c:	9c a9       	ldd	r25, Y+52	; 0x34
     44e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     452:	dc 01       	movw	r26, r24
     454:	cb 01       	movw	r24, r22
     456:	98 ab       	std	Y+48, r25	; 0x30
     458:	8f a7       	std	Y+47, r24	; 0x2f
     45a:	8f a5       	ldd	r24, Y+47	; 0x2f
     45c:	98 a9       	ldd	r25, Y+48	; 0x30
     45e:	9c a7       	std	Y+44, r25	; 0x2c
     460:	8b a7       	std	Y+43, r24	; 0x2b
     462:	8b a5       	ldd	r24, Y+43	; 0x2b
     464:	9c a5       	ldd	r25, Y+44	; 0x2c
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <__stack+0x7>
     46a:	9c a7       	std	Y+44, r25	; 0x2c
     46c:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms           (1) ;

    Commandfunction     ( 0x0E ) ;
     46e:	8e e0       	ldi	r24, 0x0E	; 14
     470:	0e 94 a2 03 	call	0x744	; 0x744 <Commandfunction>
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	a0 e8       	ldi	r26, 0x80	; 128
     47a:	bf e3       	ldi	r27, 0x3F	; 63
     47c:	8f a3       	std	Y+39, r24	; 0x27
     47e:	98 a7       	std	Y+40, r25	; 0x28
     480:	a9 a7       	std	Y+41, r26	; 0x29
     482:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     484:	6f a1       	ldd	r22, Y+39	; 0x27
     486:	78 a5       	ldd	r23, Y+40	; 0x28
     488:	89 a5       	ldd	r24, Y+41	; 0x29
     48a:	9a a5       	ldd	r25, Y+42	; 0x2a
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	4a e7       	ldi	r20, 0x7A	; 122
     492:	53 e4       	ldi	r21, 0x43	; 67
     494:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     498:	dc 01       	movw	r26, r24
     49a:	cb 01       	movw	r24, r22
     49c:	8b a3       	std	Y+35, r24	; 0x23
     49e:	9c a3       	std	Y+36, r25	; 0x24
     4a0:	ad a3       	std	Y+37, r26	; 0x25
     4a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     4a4:	6b a1       	ldd	r22, Y+35	; 0x23
     4a6:	7c a1       	ldd	r23, Y+36	; 0x24
     4a8:	8d a1       	ldd	r24, Y+37	; 0x25
     4aa:	9e a1       	ldd	r25, Y+38	; 0x26
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	40 e8       	ldi	r20, 0x80	; 128
     4b2:	5f e3       	ldi	r21, 0x3F	; 63
     4b4:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     4b8:	88 23       	and	r24, r24
     4ba:	2c f4       	brge	.+10     	; 0x4c6 <__stack+0x67>
		__ticks = 1;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9a a3       	std	Y+34, r25	; 0x22
     4c2:	89 a3       	std	Y+33, r24	; 0x21
     4c4:	3f c0       	rjmp	.+126    	; 0x544 <__stack+0xe5>
	else if (__tmp > 65535)
     4c6:	6b a1       	ldd	r22, Y+35	; 0x23
     4c8:	7c a1       	ldd	r23, Y+36	; 0x24
     4ca:	8d a1       	ldd	r24, Y+37	; 0x25
     4cc:	9e a1       	ldd	r25, Y+38	; 0x26
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	3f ef       	ldi	r19, 0xFF	; 255
     4d2:	4f e7       	ldi	r20, 0x7F	; 127
     4d4:	57 e4       	ldi	r21, 0x47	; 71
     4d6:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     4da:	18 16       	cp	r1, r24
     4dc:	4c f5       	brge	.+82     	; 0x530 <__stack+0xd1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4de:	6f a1       	ldd	r22, Y+39	; 0x27
     4e0:	78 a5       	ldd	r23, Y+40	; 0x28
     4e2:	89 a5       	ldd	r24, Y+41	; 0x29
     4e4:	9a a5       	ldd	r25, Y+42	; 0x2a
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 e2       	ldi	r20, 0x20	; 32
     4ec:	51 e4       	ldi	r21, 0x41	; 65
     4ee:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     4f2:	dc 01       	movw	r26, r24
     4f4:	cb 01       	movw	r24, r22
     4f6:	bc 01       	movw	r22, r24
     4f8:	cd 01       	movw	r24, r26
     4fa:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     4fe:	dc 01       	movw	r26, r24
     500:	cb 01       	movw	r24, r22
     502:	9a a3       	std	Y+34, r25	; 0x22
     504:	89 a3       	std	Y+33, r24	; 0x21
     506:	0f c0       	rjmp	.+30     	; 0x526 <__stack+0xc7>
     508:	89 e1       	ldi	r24, 0x19	; 25
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	98 a3       	std	Y+32, r25	; 0x20
     50e:	8f 8f       	std	Y+31, r24	; 0x1f
     510:	8f 8d       	ldd	r24, Y+31	; 0x1f
     512:	98 a1       	ldd	r25, Y+32	; 0x20
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <__stack+0xb5>
     518:	98 a3       	std	Y+32, r25	; 0x20
     51a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     51c:	89 a1       	ldd	r24, Y+33	; 0x21
     51e:	9a a1       	ldd	r25, Y+34	; 0x22
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	9a a3       	std	Y+34, r25	; 0x22
     524:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     526:	89 a1       	ldd	r24, Y+33	; 0x21
     528:	9a a1       	ldd	r25, Y+34	; 0x22
     52a:	00 97       	sbiw	r24, 0x00	; 0
     52c:	69 f7       	brne	.-38     	; 0x508 <__stack+0xa9>
     52e:	14 c0       	rjmp	.+40     	; 0x558 <__stack+0xf9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     530:	6b a1       	ldd	r22, Y+35	; 0x23
     532:	7c a1       	ldd	r23, Y+36	; 0x24
     534:	8d a1       	ldd	r24, Y+37	; 0x25
     536:	9e a1       	ldd	r25, Y+38	; 0x26
     538:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	9a a3       	std	Y+34, r25	; 0x22
     542:	89 a3       	std	Y+33, r24	; 0x21
     544:	89 a1       	ldd	r24, Y+33	; 0x21
     546:	9a a1       	ldd	r25, Y+34	; 0x22
     548:	9e 8f       	std	Y+30, r25	; 0x1e
     54a:	8d 8f       	std	Y+29, r24	; 0x1d
     54c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     54e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <__stack+0xf1>
     554:	9e 8f       	std	Y+30, r25	; 0x1e
     556:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms           (1) ;

    Commandfunction     ( 0x01 ) ;
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 a2 03 	call	0x744	; 0x744 <Commandfunction>
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	a0 e8       	ldi	r26, 0x80	; 128
     564:	bf e3       	ldi	r27, 0x3F	; 63
     566:	89 8f       	std	Y+25, r24	; 0x19
     568:	9a 8f       	std	Y+26, r25	; 0x1a
     56a:	ab 8f       	std	Y+27, r26	; 0x1b
     56c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     56e:	69 8d       	ldd	r22, Y+25	; 0x19
     570:	7a 8d       	ldd	r23, Y+26	; 0x1a
     572:	8b 8d       	ldd	r24, Y+27	; 0x1b
     574:	9c 8d       	ldd	r25, Y+28	; 0x1c
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	4a e7       	ldi	r20, 0x7A	; 122
     57c:	53 e4       	ldi	r21, 0x43	; 67
     57e:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     582:	dc 01       	movw	r26, r24
     584:	cb 01       	movw	r24, r22
     586:	8d 8b       	std	Y+21, r24	; 0x15
     588:	9e 8b       	std	Y+22, r25	; 0x16
     58a:	af 8b       	std	Y+23, r26	; 0x17
     58c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     58e:	6d 89       	ldd	r22, Y+21	; 0x15
     590:	7e 89       	ldd	r23, Y+22	; 0x16
     592:	8f 89       	ldd	r24, Y+23	; 0x17
     594:	98 8d       	ldd	r25, Y+24	; 0x18
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 e8       	ldi	r20, 0x80	; 128
     59c:	5f e3       	ldi	r21, 0x3F	; 63
     59e:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     5a2:	88 23       	and	r24, r24
     5a4:	2c f4       	brge	.+10     	; 0x5b0 <__stack+0x151>
		__ticks = 1;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	9c 8b       	std	Y+20, r25	; 0x14
     5ac:	8b 8b       	std	Y+19, r24	; 0x13
     5ae:	3f c0       	rjmp	.+126    	; 0x62e <__stack+0x1cf>
	else if (__tmp > 65535)
     5b0:	6d 89       	ldd	r22, Y+21	; 0x15
     5b2:	7e 89       	ldd	r23, Y+22	; 0x16
     5b4:	8f 89       	ldd	r24, Y+23	; 0x17
     5b6:	98 8d       	ldd	r25, Y+24	; 0x18
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	3f ef       	ldi	r19, 0xFF	; 255
     5bc:	4f e7       	ldi	r20, 0x7F	; 127
     5be:	57 e4       	ldi	r21, 0x47	; 71
     5c0:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     5c4:	18 16       	cp	r1, r24
     5c6:	4c f5       	brge	.+82     	; 0x61a <__stack+0x1bb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c8:	69 8d       	ldd	r22, Y+25	; 0x19
     5ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 e2       	ldi	r20, 0x20	; 32
     5d6:	51 e4       	ldi	r21, 0x41	; 65
     5d8:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	bc 01       	movw	r22, r24
     5e2:	cd 01       	movw	r24, r26
     5e4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	9c 8b       	std	Y+20, r25	; 0x14
     5ee:	8b 8b       	std	Y+19, r24	; 0x13
     5f0:	0f c0       	rjmp	.+30     	; 0x610 <__stack+0x1b1>
     5f2:	89 e1       	ldi	r24, 0x19	; 25
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9a 8b       	std	Y+18, r25	; 0x12
     5f8:	89 8b       	std	Y+17, r24	; 0x11
     5fa:	89 89       	ldd	r24, Y+17	; 0x11
     5fc:	9a 89       	ldd	r25, Y+18	; 0x12
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <__stack+0x19f>
     602:	9a 8b       	std	Y+18, r25	; 0x12
     604:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     606:	8b 89       	ldd	r24, Y+19	; 0x13
     608:	9c 89       	ldd	r25, Y+20	; 0x14
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	9c 8b       	std	Y+20, r25	; 0x14
     60e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     610:	8b 89       	ldd	r24, Y+19	; 0x13
     612:	9c 89       	ldd	r25, Y+20	; 0x14
     614:	00 97       	sbiw	r24, 0x00	; 0
     616:	69 f7       	brne	.-38     	; 0x5f2 <__stack+0x193>
     618:	14 c0       	rjmp	.+40     	; 0x642 <__stack+0x1e3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     61a:	6d 89       	ldd	r22, Y+21	; 0x15
     61c:	7e 89       	ldd	r23, Y+22	; 0x16
     61e:	8f 89       	ldd	r24, Y+23	; 0x17
     620:	98 8d       	ldd	r25, Y+24	; 0x18
     622:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	9c 8b       	std	Y+20, r25	; 0x14
     62c:	8b 8b       	std	Y+19, r24	; 0x13
     62e:	8b 89       	ldd	r24, Y+19	; 0x13
     630:	9c 89       	ldd	r25, Y+20	; 0x14
     632:	98 8b       	std	Y+16, r25	; 0x10
     634:	8f 87       	std	Y+15, r24	; 0x0f
     636:	8f 85       	ldd	r24, Y+15	; 0x0f
     638:	98 89       	ldd	r25, Y+16	; 0x10
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <__stack+0x1db>
     63e:	98 8b       	std	Y+16, r25	; 0x10
     640:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms           (1) ;

    Commandfunction     ( 0x06 ) ;
     642:	86 e0       	ldi	r24, 0x06	; 6
     644:	0e 94 a2 03 	call	0x744	; 0x744 <Commandfunction>
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	a0 e8       	ldi	r26, 0x80	; 128
     64e:	bf e3       	ldi	r27, 0x3F	; 63
     650:	8b 87       	std	Y+11, r24	; 0x0b
     652:	9c 87       	std	Y+12, r25	; 0x0c
     654:	ad 87       	std	Y+13, r26	; 0x0d
     656:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     658:	6b 85       	ldd	r22, Y+11	; 0x0b
     65a:	7c 85       	ldd	r23, Y+12	; 0x0c
     65c:	8d 85       	ldd	r24, Y+13	; 0x0d
     65e:	9e 85       	ldd	r25, Y+14	; 0x0e
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	4a e7       	ldi	r20, 0x7A	; 122
     666:	53 e4       	ldi	r21, 0x43	; 67
     668:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     66c:	dc 01       	movw	r26, r24
     66e:	cb 01       	movw	r24, r22
     670:	8f 83       	std	Y+7, r24	; 0x07
     672:	98 87       	std	Y+8, r25	; 0x08
     674:	a9 87       	std	Y+9, r26	; 0x09
     676:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     678:	6f 81       	ldd	r22, Y+7	; 0x07
     67a:	78 85       	ldd	r23, Y+8	; 0x08
     67c:	89 85       	ldd	r24, Y+9	; 0x09
     67e:	9a 85       	ldd	r25, Y+10	; 0x0a
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e8       	ldi	r20, 0x80	; 128
     686:	5f e3       	ldi	r21, 0x3F	; 63
     688:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     68c:	88 23       	and	r24, r24
     68e:	2c f4       	brge	.+10     	; 0x69a <__stack+0x23b>
		__ticks = 1;
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	9e 83       	std	Y+6, r25	; 0x06
     696:	8d 83       	std	Y+5, r24	; 0x05
     698:	3f c0       	rjmp	.+126    	; 0x718 <__stack+0x2b9>
	else if (__tmp > 65535)
     69a:	6f 81       	ldd	r22, Y+7	; 0x07
     69c:	78 85       	ldd	r23, Y+8	; 0x08
     69e:	89 85       	ldd	r24, Y+9	; 0x09
     6a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	3f ef       	ldi	r19, 0xFF	; 255
     6a6:	4f e7       	ldi	r20, 0x7F	; 127
     6a8:	57 e4       	ldi	r21, 0x47	; 71
     6aa:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     6ae:	18 16       	cp	r1, r24
     6b0:	4c f5       	brge	.+82     	; 0x704 <__stack+0x2a5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6b2:	6b 85       	ldd	r22, Y+11	; 0x0b
     6b4:	7c 85       	ldd	r23, Y+12	; 0x0c
     6b6:	8d 85       	ldd	r24, Y+13	; 0x0d
     6b8:	9e 85       	ldd	r25, Y+14	; 0x0e
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e2       	ldi	r20, 0x20	; 32
     6c0:	51 e4       	ldi	r21, 0x41	; 65
     6c2:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	bc 01       	movw	r22, r24
     6cc:	cd 01       	movw	r24, r26
     6ce:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	9e 83       	std	Y+6, r25	; 0x06
     6d8:	8d 83       	std	Y+5, r24	; 0x05
     6da:	0f c0       	rjmp	.+30     	; 0x6fa <__stack+0x29b>
     6dc:	89 e1       	ldi	r24, 0x19	; 25
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	9c 83       	std	Y+4, r25	; 0x04
     6e2:	8b 83       	std	Y+3, r24	; 0x03
     6e4:	8b 81       	ldd	r24, Y+3	; 0x03
     6e6:	9c 81       	ldd	r25, Y+4	; 0x04
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <__stack+0x289>
     6ec:	9c 83       	std	Y+4, r25	; 0x04
     6ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f0:	8d 81       	ldd	r24, Y+5	; 0x05
     6f2:	9e 81       	ldd	r25, Y+6	; 0x06
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	9e 83       	std	Y+6, r25	; 0x06
     6f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6fa:	8d 81       	ldd	r24, Y+5	; 0x05
     6fc:	9e 81       	ldd	r25, Y+6	; 0x06
     6fe:	00 97       	sbiw	r24, 0x00	; 0
     700:	69 f7       	brne	.-38     	; 0x6dc <__stack+0x27d>
     702:	14 c0       	rjmp	.+40     	; 0x72c <__stack+0x2cd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     704:	6f 81       	ldd	r22, Y+7	; 0x07
     706:	78 85       	ldd	r23, Y+8	; 0x08
     708:	89 85       	ldd	r24, Y+9	; 0x09
     70a:	9a 85       	ldd	r25, Y+10	; 0x0a
     70c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	9e 83       	std	Y+6, r25	; 0x06
     716:	8d 83       	std	Y+5, r24	; 0x05
     718:	8d 81       	ldd	r24, Y+5	; 0x05
     71a:	9e 81       	ldd	r25, Y+6	; 0x06
     71c:	9a 83       	std	Y+2, r25	; 0x02
     71e:	89 83       	std	Y+1, r24	; 0x01
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	9a 81       	ldd	r25, Y+2	; 0x02
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <__stack+0x2c5>
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms           (1) ;

}
     72c:	ca 5a       	subi	r28, 0xAA	; 170
     72e:	df 4f       	sbci	r29, 0xFF	; 255
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	de bf       	out	0x3e, r29	; 62
     736:	0f be       	out	0x3f, r0	; 63
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	cf 91       	pop	r28
     73c:	df 91       	pop	r29
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	08 95       	ret

00000744 <Commandfunction>:


void Commandfunction    ( unsigned char a) { // 4 bit method is used
     744:	df 93       	push	r29
     746:	cf 93       	push	r28
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	ab 97       	sbiw	r28, 0x2b	; 43
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61
     758:	8b a7       	std	Y+43, r24	; 0x2b

    Data = a & 0xF0 ;
     75a:	e5 e3       	ldi	r30, 0x35	; 53
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	8b a5       	ldd	r24, Y+43	; 0x2b
     760:	80 7f       	andi	r24, 0xF0	; 240
     762:	80 83       	st	Z, r24
    // masking lower nibble

    Command = (0<<RS) | ( 1<<E) ;
     764:	e2 e3       	ldi	r30, 0x32	; 50
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 e8       	ldi	r24, 0x80	; 128
     76a:	80 83       	st	Z, r24
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	a0 e8       	ldi	r26, 0x80	; 128
     772:	bf e3       	ldi	r27, 0x3F	; 63
     774:	8f a3       	std	Y+39, r24	; 0x27
     776:	98 a7       	std	Y+40, r25	; 0x28
     778:	a9 a7       	std	Y+41, r26	; 0x29
     77a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     77c:	6f a1       	ldd	r22, Y+39	; 0x27
     77e:	78 a5       	ldd	r23, Y+40	; 0x28
     780:	89 a5       	ldd	r24, Y+41	; 0x29
     782:	9a a5       	ldd	r25, Y+42	; 0x2a
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	4a e7       	ldi	r20, 0x7A	; 122
     78a:	53 e4       	ldi	r21, 0x43	; 67
     78c:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     790:	dc 01       	movw	r26, r24
     792:	cb 01       	movw	r24, r22
     794:	8b a3       	std	Y+35, r24	; 0x23
     796:	9c a3       	std	Y+36, r25	; 0x24
     798:	ad a3       	std	Y+37, r26	; 0x25
     79a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     79c:	6b a1       	ldd	r22, Y+35	; 0x23
     79e:	7c a1       	ldd	r23, Y+36	; 0x24
     7a0:	8d a1       	ldd	r24, Y+37	; 0x25
     7a2:	9e a1       	ldd	r25, Y+38	; 0x26
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	40 e8       	ldi	r20, 0x80	; 128
     7aa:	5f e3       	ldi	r21, 0x3F	; 63
     7ac:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     7b0:	88 23       	and	r24, r24
     7b2:	2c f4       	brge	.+10     	; 0x7be <Commandfunction+0x7a>
		__ticks = 1;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	9a a3       	std	Y+34, r25	; 0x22
     7ba:	89 a3       	std	Y+33, r24	; 0x21
     7bc:	3f c0       	rjmp	.+126    	; 0x83c <Commandfunction+0xf8>
	else if (__tmp > 65535)
     7be:	6b a1       	ldd	r22, Y+35	; 0x23
     7c0:	7c a1       	ldd	r23, Y+36	; 0x24
     7c2:	8d a1       	ldd	r24, Y+37	; 0x25
     7c4:	9e a1       	ldd	r25, Y+38	; 0x26
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	3f ef       	ldi	r19, 0xFF	; 255
     7ca:	4f e7       	ldi	r20, 0x7F	; 127
     7cc:	57 e4       	ldi	r21, 0x47	; 71
     7ce:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     7d2:	18 16       	cp	r1, r24
     7d4:	4c f5       	brge	.+82     	; 0x828 <Commandfunction+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7d6:	6f a1       	ldd	r22, Y+39	; 0x27
     7d8:	78 a5       	ldd	r23, Y+40	; 0x28
     7da:	89 a5       	ldd	r24, Y+41	; 0x29
     7dc:	9a a5       	ldd	r25, Y+42	; 0x2a
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 e2       	ldi	r20, 0x20	; 32
     7e4:	51 e4       	ldi	r21, 0x41	; 65
     7e6:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	bc 01       	movw	r22, r24
     7f0:	cd 01       	movw	r24, r26
     7f2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     7f6:	dc 01       	movw	r26, r24
     7f8:	cb 01       	movw	r24, r22
     7fa:	9a a3       	std	Y+34, r25	; 0x22
     7fc:	89 a3       	std	Y+33, r24	; 0x21
     7fe:	0f c0       	rjmp	.+30     	; 0x81e <Commandfunction+0xda>
     800:	89 e1       	ldi	r24, 0x19	; 25
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	98 a3       	std	Y+32, r25	; 0x20
     806:	8f 8f       	std	Y+31, r24	; 0x1f
     808:	8f 8d       	ldd	r24, Y+31	; 0x1f
     80a:	98 a1       	ldd	r25, Y+32	; 0x20
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <Commandfunction+0xc8>
     810:	98 a3       	std	Y+32, r25	; 0x20
     812:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     814:	89 a1       	ldd	r24, Y+33	; 0x21
     816:	9a a1       	ldd	r25, Y+34	; 0x22
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	9a a3       	std	Y+34, r25	; 0x22
     81c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     81e:	89 a1       	ldd	r24, Y+33	; 0x21
     820:	9a a1       	ldd	r25, Y+34	; 0x22
     822:	00 97       	sbiw	r24, 0x00	; 0
     824:	69 f7       	brne	.-38     	; 0x800 <Commandfunction+0xbc>
     826:	14 c0       	rjmp	.+40     	; 0x850 <Commandfunction+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     828:	6b a1       	ldd	r22, Y+35	; 0x23
     82a:	7c a1       	ldd	r23, Y+36	; 0x24
     82c:	8d a1       	ldd	r24, Y+37	; 0x25
     82e:	9e a1       	ldd	r25, Y+38	; 0x26
     830:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	9a a3       	std	Y+34, r25	; 0x22
     83a:	89 a3       	std	Y+33, r24	; 0x21
     83c:	89 a1       	ldd	r24, Y+33	; 0x21
     83e:	9a a1       	ldd	r25, Y+34	; 0x22
     840:	9e 8f       	std	Y+30, r25	; 0x1e
     842:	8d 8f       	std	Y+29, r24	; 0x1d
     844:	8d 8d       	ldd	r24, Y+29	; 0x1d
     846:	9e 8d       	ldd	r25, Y+30	; 0x1e
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <Commandfunction+0x104>
     84c:	9e 8f       	std	Y+30, r25	; 0x1e
     84e:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms           ( 1) ;

    Command = (0<<RS) | ( 0<<E) ;
     850:	e2 e3       	ldi	r30, 0x32	; 50
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	10 82       	st	Z, r1
    Data = a<<4 ;
     856:	e5 e3       	ldi	r30, 0x35	; 53
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	8b a5       	ldd	r24, Y+43	; 0x2b
     85c:	82 95       	swap	r24
     85e:	80 7f       	andi	r24, 0xF0	; 240
     860:	80 83       	st	Z, r24
    // masking higher nibble

    Command = (0<<RS) | ( 1<<E) ;
     862:	e2 e3       	ldi	r30, 0x32	; 50
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 e8       	ldi	r24, 0x80	; 128
     868:	80 83       	st	Z, r24
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	a0 e8       	ldi	r26, 0x80	; 128
     870:	bf e3       	ldi	r27, 0x3F	; 63
     872:	89 8f       	std	Y+25, r24	; 0x19
     874:	9a 8f       	std	Y+26, r25	; 0x1a
     876:	ab 8f       	std	Y+27, r26	; 0x1b
     878:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     87a:	69 8d       	ldd	r22, Y+25	; 0x19
     87c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     87e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     880:	9c 8d       	ldd	r25, Y+28	; 0x1c
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	4a e7       	ldi	r20, 0x7A	; 122
     888:	53 e4       	ldi	r21, 0x43	; 67
     88a:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     88e:	dc 01       	movw	r26, r24
     890:	cb 01       	movw	r24, r22
     892:	8d 8b       	std	Y+21, r24	; 0x15
     894:	9e 8b       	std	Y+22, r25	; 0x16
     896:	af 8b       	std	Y+23, r26	; 0x17
     898:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     89a:	6d 89       	ldd	r22, Y+21	; 0x15
     89c:	7e 89       	ldd	r23, Y+22	; 0x16
     89e:	8f 89       	ldd	r24, Y+23	; 0x17
     8a0:	98 8d       	ldd	r25, Y+24	; 0x18
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e8       	ldi	r20, 0x80	; 128
     8a8:	5f e3       	ldi	r21, 0x3F	; 63
     8aa:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     8ae:	88 23       	and	r24, r24
     8b0:	2c f4       	brge	.+10     	; 0x8bc <Commandfunction+0x178>
		__ticks = 1;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	9c 8b       	std	Y+20, r25	; 0x14
     8b8:	8b 8b       	std	Y+19, r24	; 0x13
     8ba:	3f c0       	rjmp	.+126    	; 0x93a <Commandfunction+0x1f6>
	else if (__tmp > 65535)
     8bc:	6d 89       	ldd	r22, Y+21	; 0x15
     8be:	7e 89       	ldd	r23, Y+22	; 0x16
     8c0:	8f 89       	ldd	r24, Y+23	; 0x17
     8c2:	98 8d       	ldd	r25, Y+24	; 0x18
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	3f ef       	ldi	r19, 0xFF	; 255
     8c8:	4f e7       	ldi	r20, 0x7F	; 127
     8ca:	57 e4       	ldi	r21, 0x47	; 71
     8cc:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     8d0:	18 16       	cp	r1, r24
     8d2:	4c f5       	brge	.+82     	; 0x926 <Commandfunction+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8d4:	69 8d       	ldd	r22, Y+25	; 0x19
     8d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8da:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e2       	ldi	r20, 0x20	; 32
     8e2:	51 e4       	ldi	r21, 0x41	; 65
     8e4:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	bc 01       	movw	r22, r24
     8ee:	cd 01       	movw	r24, r26
     8f0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	9c 8b       	std	Y+20, r25	; 0x14
     8fa:	8b 8b       	std	Y+19, r24	; 0x13
     8fc:	0f c0       	rjmp	.+30     	; 0x91c <Commandfunction+0x1d8>
     8fe:	89 e1       	ldi	r24, 0x19	; 25
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	9a 8b       	std	Y+18, r25	; 0x12
     904:	89 8b       	std	Y+17, r24	; 0x11
     906:	89 89       	ldd	r24, Y+17	; 0x11
     908:	9a 89       	ldd	r25, Y+18	; 0x12
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <Commandfunction+0x1c6>
     90e:	9a 8b       	std	Y+18, r25	; 0x12
     910:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     912:	8b 89       	ldd	r24, Y+19	; 0x13
     914:	9c 89       	ldd	r25, Y+20	; 0x14
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	9c 8b       	std	Y+20, r25	; 0x14
     91a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91c:	8b 89       	ldd	r24, Y+19	; 0x13
     91e:	9c 89       	ldd	r25, Y+20	; 0x14
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	69 f7       	brne	.-38     	; 0x8fe <Commandfunction+0x1ba>
     924:	14 c0       	rjmp	.+40     	; 0x94e <Commandfunction+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     926:	6d 89       	ldd	r22, Y+21	; 0x15
     928:	7e 89       	ldd	r23, Y+22	; 0x16
     92a:	8f 89       	ldd	r24, Y+23	; 0x17
     92c:	98 8d       	ldd	r25, Y+24	; 0x18
     92e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	9c 8b       	std	Y+20, r25	; 0x14
     938:	8b 8b       	std	Y+19, r24	; 0x13
     93a:	8b 89       	ldd	r24, Y+19	; 0x13
     93c:	9c 89       	ldd	r25, Y+20	; 0x14
     93e:	98 8b       	std	Y+16, r25	; 0x10
     940:	8f 87       	std	Y+15, r24	; 0x0f
     942:	8f 85       	ldd	r24, Y+15	; 0x0f
     944:	98 89       	ldd	r25, Y+16	; 0x10
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <Commandfunction+0x202>
     94a:	98 8b       	std	Y+16, r25	; 0x10
     94c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms           ( 1) ;

    Command = (0<<RS) | ( 0<<E) ;
     94e:	e2 e3       	ldi	r30, 0x32	; 50
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	10 82       	st	Z, r1
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a8 e4       	ldi	r26, 0x48	; 72
     95a:	b2 e4       	ldi	r27, 0x42	; 66
     95c:	8b 87       	std	Y+11, r24	; 0x0b
     95e:	9c 87       	std	Y+12, r25	; 0x0c
     960:	ad 87       	std	Y+13, r26	; 0x0d
     962:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     964:	6b 85       	ldd	r22, Y+11	; 0x0b
     966:	7c 85       	ldd	r23, Y+12	; 0x0c
     968:	8d 85       	ldd	r24, Y+13	; 0x0d
     96a:	9e 85       	ldd	r25, Y+14	; 0x0e
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	4a e7       	ldi	r20, 0x7A	; 122
     972:	53 e4       	ldi	r21, 0x43	; 67
     974:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	8f 83       	std	Y+7, r24	; 0x07
     97e:	98 87       	std	Y+8, r25	; 0x08
     980:	a9 87       	std	Y+9, r26	; 0x09
     982:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     984:	6f 81       	ldd	r22, Y+7	; 0x07
     986:	78 85       	ldd	r23, Y+8	; 0x08
     988:	89 85       	ldd	r24, Y+9	; 0x09
     98a:	9a 85       	ldd	r25, Y+10	; 0x0a
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e8       	ldi	r20, 0x80	; 128
     992:	5f e3       	ldi	r21, 0x3F	; 63
     994:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     998:	88 23       	and	r24, r24
     99a:	2c f4       	brge	.+10     	; 0x9a6 <Commandfunction+0x262>
		__ticks = 1;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	9e 83       	std	Y+6, r25	; 0x06
     9a2:	8d 83       	std	Y+5, r24	; 0x05
     9a4:	3f c0       	rjmp	.+126    	; 0xa24 <Commandfunction+0x2e0>
	else if (__tmp > 65535)
     9a6:	6f 81       	ldd	r22, Y+7	; 0x07
     9a8:	78 85       	ldd	r23, Y+8	; 0x08
     9aa:	89 85       	ldd	r24, Y+9	; 0x09
     9ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	3f ef       	ldi	r19, 0xFF	; 255
     9b2:	4f e7       	ldi	r20, 0x7F	; 127
     9b4:	57 e4       	ldi	r21, 0x47	; 71
     9b6:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     9ba:	18 16       	cp	r1, r24
     9bc:	4c f5       	brge	.+82     	; 0xa10 <Commandfunction+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9be:	6b 85       	ldd	r22, Y+11	; 0x0b
     9c0:	7c 85       	ldd	r23, Y+12	; 0x0c
     9c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c4:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 e2       	ldi	r20, 0x20	; 32
     9cc:	51 e4       	ldi	r21, 0x41	; 65
     9ce:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     9d2:	dc 01       	movw	r26, r24
     9d4:	cb 01       	movw	r24, r22
     9d6:	bc 01       	movw	r22, r24
     9d8:	cd 01       	movw	r24, r26
     9da:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     9de:	dc 01       	movw	r26, r24
     9e0:	cb 01       	movw	r24, r22
     9e2:	9e 83       	std	Y+6, r25	; 0x06
     9e4:	8d 83       	std	Y+5, r24	; 0x05
     9e6:	0f c0       	rjmp	.+30     	; 0xa06 <Commandfunction+0x2c2>
     9e8:	89 e1       	ldi	r24, 0x19	; 25
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	9c 83       	std	Y+4, r25	; 0x04
     9ee:	8b 83       	std	Y+3, r24	; 0x03
     9f0:	8b 81       	ldd	r24, Y+3	; 0x03
     9f2:	9c 81       	ldd	r25, Y+4	; 0x04
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <Commandfunction+0x2b0>
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9fc:	8d 81       	ldd	r24, Y+5	; 0x05
     9fe:	9e 81       	ldd	r25, Y+6	; 0x06
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	9e 83       	std	Y+6, r25	; 0x06
     a04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a06:	8d 81       	ldd	r24, Y+5	; 0x05
     a08:	9e 81       	ldd	r25, Y+6	; 0x06
     a0a:	00 97       	sbiw	r24, 0x00	; 0
     a0c:	69 f7       	brne	.-38     	; 0x9e8 <Commandfunction+0x2a4>
     a0e:	14 c0       	rjmp	.+40     	; 0xa38 <Commandfunction+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a10:	6f 81       	ldd	r22, Y+7	; 0x07
     a12:	78 85       	ldd	r23, Y+8	; 0x08
     a14:	89 85       	ldd	r24, Y+9	; 0x09
     a16:	9a 85       	ldd	r25, Y+10	; 0x0a
     a18:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	9e 83       	std	Y+6, r25	; 0x06
     a22:	8d 83       	std	Y+5, r24	; 0x05
     a24:	8d 81       	ldd	r24, Y+5	; 0x05
     a26:	9e 81       	ldd	r25, Y+6	; 0x06
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <Commandfunction+0x2ec>
     a34:	9a 83       	std	Y+2, r25	; 0x02
     a36:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms           ( 50 ) ;

}
     a38:	ab 96       	adiw	r28, 0x2b	; 43
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	cf 91       	pop	r28
     a46:	df 91       	pop	r29
     a48:	08 95       	ret

00000a4a <Datafunction>:


void Datafunction       ( unsigned char a) { // 4 bit method is used
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	ab 97       	sbiw	r28, 0x2b	; 43
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	8b a7       	std	Y+43, r24	; 0x2b

    Data = a & 0xF0 ;
     a60:	e5 e3       	ldi	r30, 0x35	; 53
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	8b a5       	ldd	r24, Y+43	; 0x2b
     a66:	80 7f       	andi	r24, 0xF0	; 240
     a68:	80 83       	st	Z, r24
    // masking lower nibble

    Command = (1<<RS) | ( 1<<E) ;
     a6a:	e2 e3       	ldi	r30, 0x32	; 50
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 ec       	ldi	r24, 0xC0	; 192
     a70:	80 83       	st	Z, r24
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	a0 e8       	ldi	r26, 0x80	; 128
     a78:	bf e3       	ldi	r27, 0x3F	; 63
     a7a:	8f a3       	std	Y+39, r24	; 0x27
     a7c:	98 a7       	std	Y+40, r25	; 0x28
     a7e:	a9 a7       	std	Y+41, r26	; 0x29
     a80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a82:	6f a1       	ldd	r22, Y+39	; 0x27
     a84:	78 a5       	ldd	r23, Y+40	; 0x28
     a86:	89 a5       	ldd	r24, Y+41	; 0x29
     a88:	9a a5       	ldd	r25, Y+42	; 0x2a
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	4a e7       	ldi	r20, 0x7A	; 122
     a90:	53 e4       	ldi	r21, 0x43	; 67
     a92:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	8b a3       	std	Y+35, r24	; 0x23
     a9c:	9c a3       	std	Y+36, r25	; 0x24
     a9e:	ad a3       	std	Y+37, r26	; 0x25
     aa0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     aa2:	6b a1       	ldd	r22, Y+35	; 0x23
     aa4:	7c a1       	ldd	r23, Y+36	; 0x24
     aa6:	8d a1       	ldd	r24, Y+37	; 0x25
     aa8:	9e a1       	ldd	r25, Y+38	; 0x26
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e8       	ldi	r20, 0x80	; 128
     ab0:	5f e3       	ldi	r21, 0x3F	; 63
     ab2:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     ab6:	88 23       	and	r24, r24
     ab8:	2c f4       	brge	.+10     	; 0xac4 <Datafunction+0x7a>
		__ticks = 1;
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	9a a3       	std	Y+34, r25	; 0x22
     ac0:	89 a3       	std	Y+33, r24	; 0x21
     ac2:	3f c0       	rjmp	.+126    	; 0xb42 <Datafunction+0xf8>
	else if (__tmp > 65535)
     ac4:	6b a1       	ldd	r22, Y+35	; 0x23
     ac6:	7c a1       	ldd	r23, Y+36	; 0x24
     ac8:	8d a1       	ldd	r24, Y+37	; 0x25
     aca:	9e a1       	ldd	r25, Y+38	; 0x26
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	3f ef       	ldi	r19, 0xFF	; 255
     ad0:	4f e7       	ldi	r20, 0x7F	; 127
     ad2:	57 e4       	ldi	r21, 0x47	; 71
     ad4:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     ad8:	18 16       	cp	r1, r24
     ada:	4c f5       	brge	.+82     	; 0xb2e <Datafunction+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     adc:	6f a1       	ldd	r22, Y+39	; 0x27
     ade:	78 a5       	ldd	r23, Y+40	; 0x28
     ae0:	89 a5       	ldd	r24, Y+41	; 0x29
     ae2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e2       	ldi	r20, 0x20	; 32
     aea:	51 e4       	ldi	r21, 0x41	; 65
     aec:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     af0:	dc 01       	movw	r26, r24
     af2:	cb 01       	movw	r24, r22
     af4:	bc 01       	movw	r22, r24
     af6:	cd 01       	movw	r24, r26
     af8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     afc:	dc 01       	movw	r26, r24
     afe:	cb 01       	movw	r24, r22
     b00:	9a a3       	std	Y+34, r25	; 0x22
     b02:	89 a3       	std	Y+33, r24	; 0x21
     b04:	0f c0       	rjmp	.+30     	; 0xb24 <Datafunction+0xda>
     b06:	89 e1       	ldi	r24, 0x19	; 25
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	98 a3       	std	Y+32, r25	; 0x20
     b0c:	8f 8f       	std	Y+31, r24	; 0x1f
     b0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b10:	98 a1       	ldd	r25, Y+32	; 0x20
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <Datafunction+0xc8>
     b16:	98 a3       	std	Y+32, r25	; 0x20
     b18:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b1a:	89 a1       	ldd	r24, Y+33	; 0x21
     b1c:	9a a1       	ldd	r25, Y+34	; 0x22
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	9a a3       	std	Y+34, r25	; 0x22
     b22:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b24:	89 a1       	ldd	r24, Y+33	; 0x21
     b26:	9a a1       	ldd	r25, Y+34	; 0x22
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	69 f7       	brne	.-38     	; 0xb06 <Datafunction+0xbc>
     b2c:	14 c0       	rjmp	.+40     	; 0xb56 <Datafunction+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b2e:	6b a1       	ldd	r22, Y+35	; 0x23
     b30:	7c a1       	ldd	r23, Y+36	; 0x24
     b32:	8d a1       	ldd	r24, Y+37	; 0x25
     b34:	9e a1       	ldd	r25, Y+38	; 0x26
     b36:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	9a a3       	std	Y+34, r25	; 0x22
     b40:	89 a3       	std	Y+33, r24	; 0x21
     b42:	89 a1       	ldd	r24, Y+33	; 0x21
     b44:	9a a1       	ldd	r25, Y+34	; 0x22
     b46:	9e 8f       	std	Y+30, r25	; 0x1e
     b48:	8d 8f       	std	Y+29, r24	; 0x1d
     b4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	f1 f7       	brne	.-4      	; 0xb4e <Datafunction+0x104>
     b52:	9e 8f       	std	Y+30, r25	; 0x1e
     b54:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms           ( 1 ) ;
    Command = (1<<RS) | ( 0<<E) ;
     b56:	e2 e3       	ldi	r30, 0x32	; 50
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 e4       	ldi	r24, 0x40	; 64
     b5c:	80 83       	st	Z, r24

    Data = a<<4 ;
     b5e:	e5 e3       	ldi	r30, 0x35	; 53
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8b a5       	ldd	r24, Y+43	; 0x2b
     b64:	82 95       	swap	r24
     b66:	80 7f       	andi	r24, 0xF0	; 240
     b68:	80 83       	st	Z, r24
    // masking higher nibble

    Command = (1<<RS) | ( 1<<E) ;
     b6a:	e2 e3       	ldi	r30, 0x32	; 50
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 ec       	ldi	r24, 0xC0	; 192
     b70:	80 83       	st	Z, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e8       	ldi	r26, 0x80	; 128
     b78:	bf e3       	ldi	r27, 0x3F	; 63
     b7a:	89 8f       	std	Y+25, r24	; 0x19
     b7c:	9a 8f       	std	Y+26, r25	; 0x1a
     b7e:	ab 8f       	std	Y+27, r26	; 0x1b
     b80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	69 8d       	ldd	r22, Y+25	; 0x19
     b84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a e7       	ldi	r20, 0x7A	; 122
     b90:	53 e4       	ldi	r21, 0x43	; 67
     b92:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8d 8b       	std	Y+21, r24	; 0x15
     b9c:	9e 8b       	std	Y+22, r25	; 0x16
     b9e:	af 8b       	std	Y+23, r26	; 0x17
     ba0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ba2:	6d 89       	ldd	r22, Y+21	; 0x15
     ba4:	7e 89       	ldd	r23, Y+22	; 0x16
     ba6:	8f 89       	ldd	r24, Y+23	; 0x17
     ba8:	98 8d       	ldd	r25, Y+24	; 0x18
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     bb6:	88 23       	and	r24, r24
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <Datafunction+0x17a>
		__ticks = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9c 8b       	std	Y+20, r25	; 0x14
     bc0:	8b 8b       	std	Y+19, r24	; 0x13
     bc2:	3f c0       	rjmp	.+126    	; 0xc42 <Datafunction+0x1f8>
	else if (__tmp > 65535)
     bc4:	6d 89       	ldd	r22, Y+21	; 0x15
     bc6:	7e 89       	ldd	r23, Y+22	; 0x16
     bc8:	8f 89       	ldd	r24, Y+23	; 0x17
     bca:	98 8d       	ldd	r25, Y+24	; 0x18
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	57 e4       	ldi	r21, 0x47	; 71
     bd4:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     bd8:	18 16       	cp	r1, r24
     bda:	4c f5       	brge	.+82     	; 0xc2e <Datafunction+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	69 8d       	ldd	r22, Y+25	; 0x19
     bde:	7a 8d       	ldd	r23, Y+26	; 0x1a
     be0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     be2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9c 8b       	std	Y+20, r25	; 0x14
     c02:	8b 8b       	std	Y+19, r24	; 0x13
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <Datafunction+0x1da>
     c06:	89 e1       	ldi	r24, 0x19	; 25
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9a 8b       	std	Y+18, r25	; 0x12
     c0c:	89 8b       	std	Y+17, r24	; 0x11
     c0e:	89 89       	ldd	r24, Y+17	; 0x11
     c10:	9a 89       	ldd	r25, Y+18	; 0x12
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <Datafunction+0x1c8>
     c16:	9a 8b       	std	Y+18, r25	; 0x12
     c18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8b 89       	ldd	r24, Y+19	; 0x13
     c1c:	9c 89       	ldd	r25, Y+20	; 0x14
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9c 8b       	std	Y+20, r25	; 0x14
     c22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8b 89       	ldd	r24, Y+19	; 0x13
     c26:	9c 89       	ldd	r25, Y+20	; 0x14
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <Datafunction+0x1bc>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <Datafunction+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6d 89       	ldd	r22, Y+21	; 0x15
     c30:	7e 89       	ldd	r23, Y+22	; 0x16
     c32:	8f 89       	ldd	r24, Y+23	; 0x17
     c34:	98 8d       	ldd	r25, Y+24	; 0x18
     c36:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9c 8b       	std	Y+20, r25	; 0x14
     c40:	8b 8b       	std	Y+19, r24	; 0x13
     c42:	8b 89       	ldd	r24, Y+19	; 0x13
     c44:	9c 89       	ldd	r25, Y+20	; 0x14
     c46:	98 8b       	std	Y+16, r25	; 0x10
     c48:	8f 87       	std	Y+15, r24	; 0x0f
     c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c4c:	98 89       	ldd	r25, Y+16	; 0x10
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <Datafunction+0x204>
     c52:	98 8b       	std	Y+16, r25	; 0x10
     c54:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms           ( 1 ) ;
    Command = (1<<RS) | ( 0<<E) ;
     c56:	e2 e3       	ldi	r30, 0x32	; 50
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 e4       	ldi	r24, 0x40	; 64
     c5c:	80 83       	st	Z, r24
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a8 e4       	ldi	r26, 0x48	; 72
     c64:	b2 e4       	ldi	r27, 0x42	; 66
     c66:	8b 87       	std	Y+11, r24	; 0x0b
     c68:	9c 87       	std	Y+12, r25	; 0x0c
     c6a:	ad 87       	std	Y+13, r26	; 0x0d
     c6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c70:	7c 85       	ldd	r23, Y+12	; 0x0c
     c72:	8d 85       	ldd	r24, Y+13	; 0x0d
     c74:	9e 85       	ldd	r25, Y+14	; 0x0e
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	4a e7       	ldi	r20, 0x7A	; 122
     c7c:	53 e4       	ldi	r21, 0x43	; 67
     c7e:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	8f 83       	std	Y+7, r24	; 0x07
     c88:	98 87       	std	Y+8, r25	; 0x08
     c8a:	a9 87       	std	Y+9, r26	; 0x09
     c8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c8e:	6f 81       	ldd	r22, Y+7	; 0x07
     c90:	78 85       	ldd	r23, Y+8	; 0x08
     c92:	89 85       	ldd	r24, Y+9	; 0x09
     c94:	9a 85       	ldd	r25, Y+10	; 0x0a
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e8       	ldi	r20, 0x80	; 128
     c9c:	5f e3       	ldi	r21, 0x3F	; 63
     c9e:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     ca2:	88 23       	and	r24, r24
     ca4:	2c f4       	brge	.+10     	; 0xcb0 <Datafunction+0x266>
		__ticks = 1;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	9e 83       	std	Y+6, r25	; 0x06
     cac:	8d 83       	std	Y+5, r24	; 0x05
     cae:	3f c0       	rjmp	.+126    	; 0xd2e <Datafunction+0x2e4>
	else if (__tmp > 65535)
     cb0:	6f 81       	ldd	r22, Y+7	; 0x07
     cb2:	78 85       	ldd	r23, Y+8	; 0x08
     cb4:	89 85       	ldd	r24, Y+9	; 0x09
     cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	3f ef       	ldi	r19, 0xFF	; 255
     cbc:	4f e7       	ldi	r20, 0x7F	; 127
     cbe:	57 e4       	ldi	r21, 0x47	; 71
     cc0:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     cc4:	18 16       	cp	r1, r24
     cc6:	4c f5       	brge	.+82     	; 0xd1a <Datafunction+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cce:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e2       	ldi	r20, 0x20	; 32
     cd6:	51 e4       	ldi	r21, 0x41	; 65
     cd8:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	bc 01       	movw	r22, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	9e 83       	std	Y+6, r25	; 0x06
     cee:	8d 83       	std	Y+5, r24	; 0x05
     cf0:	0f c0       	rjmp	.+30     	; 0xd10 <Datafunction+0x2c6>
     cf2:	89 e1       	ldi	r24, 0x19	; 25
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	9c 83       	std	Y+4, r25	; 0x04
     cf8:	8b 83       	std	Y+3, r24	; 0x03
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <Datafunction+0x2b4>
     d02:	9c 83       	std	Y+4, r25	; 0x04
     d04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d06:	8d 81       	ldd	r24, Y+5	; 0x05
     d08:	9e 81       	ldd	r25, Y+6	; 0x06
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	9e 83       	std	Y+6, r25	; 0x06
     d0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d10:	8d 81       	ldd	r24, Y+5	; 0x05
     d12:	9e 81       	ldd	r25, Y+6	; 0x06
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	69 f7       	brne	.-38     	; 0xcf2 <Datafunction+0x2a8>
     d18:	14 c0       	rjmp	.+40     	; 0xd42 <Datafunction+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1a:	6f 81       	ldd	r22, Y+7	; 0x07
     d1c:	78 85       	ldd	r23, Y+8	; 0x08
     d1e:	89 85       	ldd	r24, Y+9	; 0x09
     d20:	9a 85       	ldd	r25, Y+10	; 0x0a
     d22:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	9e 83       	std	Y+6, r25	; 0x06
     d2c:	8d 83       	std	Y+5, r24	; 0x05
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <Datafunction+0x2f0>
     d3e:	9a 83       	std	Y+2, r25	; 0x02
     d40:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms           ( 50 ) ;
}
     d42:	ab 96       	adiw	r28, 0x2b	; 43
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <LCD>:


void LCD                ( char *a) { // char char to LCD
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	00 d0       	rcall	.+0      	; 0xd5a <LCD+0x6>
     d5a:	0f 92       	push	r0
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	9b 83       	std	Y+3, r25	; 0x03
     d62:	8a 83       	std	Y+2, r24	; 0x02

    unsigned char z=0 ;
     d64:	19 82       	std	Y+1, r1	; 0x01
     d66:	0e c0       	rjmp	.+28     	; 0xd84 <LCD+0x30>
    for ( ; a[z] !=0 ; z++ )    Datafunction ( a[z] ) ;
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	9b 81       	ldd	r25, Y+3	; 0x03
     d72:	fc 01       	movw	r30, r24
     d74:	e2 0f       	add	r30, r18
     d76:	f3 1f       	adc	r31, r19
     d78:	80 81       	ld	r24, Z
     d7a:	0e 94 25 05 	call	0xa4a	; 0xa4a <Datafunction>
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	9b 81       	ldd	r25, Y+3	; 0x03
     d8e:	fc 01       	movw	r30, r24
     d90:	e2 0f       	add	r30, r18
     d92:	f3 1f       	adc	r31, r19
     d94:	80 81       	ld	r24, Z
     d96:	88 23       	and	r24, r24
     d98:	39 f7       	brne	.-50     	; 0xd68 <LCD+0x14>

}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <Recieving>:


unsigned char Recieving (  ) {
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62

    ADCSRA |= ( 1<<ADSC ) ; // setting on start conversion bit
     dae:	a6 e2       	ldi	r26, 0x26	; 38
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e6 e2       	ldi	r30, 0x26	; 38
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	80 64       	ori	r24, 0x40	; 64
     dba:	8c 93       	st	X, r24

    while               ( (ADCSRA & (1<<ADIF)) == 0 ) ; // until interrupt flag is low
     dbc:	e6 e2       	ldi	r30, 0x26	; 38
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	80 71       	andi	r24, 0x10	; 16
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	b9 f3       	breq	.-18     	; 0xdbc <Recieving+0x16>
    ADCSRA |= (1<<ADIF) ;
     dce:	a6 e2       	ldi	r26, 0x26	; 38
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e6 e2       	ldi	r30, 0x26	; 38
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	80 61       	ori	r24, 0x10	; 16
     dda:	8c 93       	st	X, r24

    return              ( ADC ) ; // ADC means ADCH and ADCL
     ddc:	e4 e2       	ldi	r30, 0x24	; 36
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01

}
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <Operation>:


void Operation          ( unsigned char variable ) {
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	62 97       	sbiw	r28, 0x12	; 18
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	8a 8b       	std	Y+18, r24	; 0x12

//      From binary to ASCII

    unsigned char convert , loop = 0 ;
     e00:	18 8a       	std	Y+16, r1	; 0x10
    char position = 0xc3 ;
     e02:	83 ec       	ldi	r24, 0xC3	; 195
     e04:	8f 87       	std	Y+15, r24	; 0x0f
     e06:	1a c0       	rjmp	.+52     	; 0xe3c <Operation+0x52>

    for  ( ; loop<3 ; loop++ ) {

        convert = variable % 10 ; // to make it bcd
     e08:	8a 89       	ldd	r24, Y+18	; 0x12
     e0a:	9a e0       	ldi	r25, 0x0A	; 10
     e0c:	69 2f       	mov	r22, r25
     e0e:	0e 94 af 08 	call	0x115e	; 0x115e <__udivmodqi4>
     e12:	89 2f       	mov	r24, r25
     e14:	89 8b       	std	Y+17, r24	; 0x11
        variable /= 10 ;
     e16:	8a 89       	ldd	r24, Y+18	; 0x12
     e18:	9a e0       	ldi	r25, 0x0A	; 10
     e1a:	69 2f       	mov	r22, r25
     e1c:	0e 94 af 08 	call	0x115e	; 0x115e <__udivmodqi4>
     e20:	8a 8b       	std	Y+18, r24	; 0x12

        Commandfunction ( position ) ; // this is very important
     e22:	8f 85       	ldd	r24, Y+15	; 0x0f
     e24:	0e 94 a2 03 	call	0x744	; 0x744 <Commandfunction>

        Datafunction ( convert + 48 ) ; // to make data ascii
     e28:	89 89       	ldd	r24, Y+17	; 0x11
     e2a:	80 5d       	subi	r24, 0xD0	; 208
     e2c:	0e 94 25 05 	call	0xa4a	; 0xa4a <Datafunction>
        position-- ;
     e30:	8f 85       	ldd	r24, Y+15	; 0x0f
     e32:	81 50       	subi	r24, 0x01	; 1
     e34:	8f 87       	std	Y+15, r24	; 0x0f
//      From binary to ASCII

    unsigned char convert , loop = 0 ;
    char position = 0xc3 ;

    for  ( ; loop<3 ; loop++ ) {
     e36:	88 89       	ldd	r24, Y+16	; 0x10
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	88 8b       	std	Y+16, r24	; 0x10
     e3c:	88 89       	ldd	r24, Y+16	; 0x10
     e3e:	83 30       	cpi	r24, 0x03	; 3
     e40:	18 f3       	brcs	.-58     	; 0xe08 <Operation+0x1e>
        Commandfunction ( position ) ; // this is very important

        Datafunction ( convert + 48 ) ; // to make data ascii
        position-- ;
    }
Commandfunction( 0xC5) ;
     e42:	85 ec       	ldi	r24, 0xC5	; 197
     e44:	0e 94 a2 03 	call	0x744	; 0x744 <Commandfunction>
    LCD( " *C") ; // degree centigrade
     e48:	8c e6       	ldi	r24, 0x6C	; 108
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 aa 06 	call	0xd54	; 0xd54 <LCD>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a0 ea       	ldi	r26, 0xA0	; 160
     e56:	b0 e4       	ldi	r27, 0x40	; 64
     e58:	8b 87       	std	Y+11, r24	; 0x0b
     e5a:	9c 87       	std	Y+12, r25	; 0x0c
     e5c:	ad 87       	std	Y+13, r26	; 0x0d
     e5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e60:	6b 85       	ldd	r22, Y+11	; 0x0b
     e62:	7c 85       	ldd	r23, Y+12	; 0x0c
     e64:	8d 85       	ldd	r24, Y+13	; 0x0d
     e66:	9e 85       	ldd	r25, Y+14	; 0x0e
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	4a e7       	ldi	r20, 0x7A	; 122
     e6e:	53 e4       	ldi	r21, 0x43	; 67
     e70:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	8f 83       	std	Y+7, r24	; 0x07
     e7a:	98 87       	std	Y+8, r25	; 0x08
     e7c:	a9 87       	std	Y+9, r26	; 0x09
     e7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e80:	6f 81       	ldd	r22, Y+7	; 0x07
     e82:	78 85       	ldd	r23, Y+8	; 0x08
     e84:	89 85       	ldd	r24, Y+9	; 0x09
     e86:	9a 85       	ldd	r25, Y+10	; 0x0a
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e8       	ldi	r20, 0x80	; 128
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 a3 07 	call	0xf46	; 0xf46 <__cmpsf2>
     e94:	88 23       	and	r24, r24
     e96:	2c f4       	brge	.+10     	; 0xea2 <Operation+0xb8>
		__ticks = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9e 83       	std	Y+6, r25	; 0x06
     e9e:	8d 83       	std	Y+5, r24	; 0x05
     ea0:	3f c0       	rjmp	.+126    	; 0xf20 <Operation+0x136>
	else if (__tmp > 65535)
     ea2:	6f 81       	ldd	r22, Y+7	; 0x07
     ea4:	78 85       	ldd	r23, Y+8	; 0x08
     ea6:	89 85       	ldd	r24, Y+9	; 0x09
     ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	3f ef       	ldi	r19, 0xFF	; 255
     eae:	4f e7       	ldi	r20, 0x7F	; 127
     eb0:	57 e4       	ldi	r21, 0x47	; 71
     eb2:	0e 94 20 08 	call	0x1040	; 0x1040 <__gesf2>
     eb6:	18 16       	cp	r1, r24
     eb8:	4c f5       	brge	.+82     	; 0xf0c <Operation+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eba:	6b 85       	ldd	r22, Y+11	; 0x0b
     ebc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e2       	ldi	r20, 0x20	; 32
     ec8:	51 e4       	ldi	r21, 0x41	; 65
     eca:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	bc 01       	movw	r22, r24
     ed4:	cd 01       	movw	r24, r26
     ed6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	9e 83       	std	Y+6, r25	; 0x06
     ee0:	8d 83       	std	Y+5, r24	; 0x05
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <Operation+0x118>
     ee4:	89 e1       	ldi	r24, 0x19	; 25
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9c 83       	std	Y+4, r25	; 0x04
     eea:	8b 83       	std	Y+3, r24	; 0x03
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <Operation+0x106>
     ef4:	9c 83       	std	Y+4, r25	; 0x04
     ef6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	9e 81       	ldd	r25, Y+6	; 0x06
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	9e 83       	std	Y+6, r25	; 0x06
     f00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	69 f7       	brne	.-38     	; 0xee4 <Operation+0xfa>
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <Operation+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0c:	6f 81       	ldd	r22, Y+7	; 0x07
     f0e:	78 85       	ldd	r23, Y+8	; 0x08
     f10:	89 85       	ldd	r24, Y+9	; 0x09
     f12:	9a 85       	ldd	r25, Y+10	; 0x0a
     f14:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	9e 83       	std	Y+6, r25	; 0x06
     f1e:	8d 83       	std	Y+5, r24	; 0x05
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <Operation+0x142>
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(5 ) ;
    // show new data every 5th second

}
     f34:	62 96       	adiw	r28, 0x12	; 18
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <__cmpsf2>:
     f46:	2f d0       	rcall	.+94     	; 0xfa6 <__fp_cmp>
     f48:	08 f4       	brcc	.+2      	; 0xf4c <__cmpsf2+0x6>
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	08 95       	ret

00000f4e <__fixunssfsi>:
     f4e:	57 d0       	rcall	.+174    	; 0xffe <__fp_splitA>
     f50:	88 f0       	brcs	.+34     	; 0xf74 <__fixunssfsi+0x26>
     f52:	9f 57       	subi	r25, 0x7F	; 127
     f54:	90 f0       	brcs	.+36     	; 0xf7a <__fixunssfsi+0x2c>
     f56:	b9 2f       	mov	r27, r25
     f58:	99 27       	eor	r25, r25
     f5a:	b7 51       	subi	r27, 0x17	; 23
     f5c:	a0 f0       	brcs	.+40     	; 0xf86 <__fixunssfsi+0x38>
     f5e:	d1 f0       	breq	.+52     	; 0xf94 <__fixunssfsi+0x46>
     f60:	66 0f       	add	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	88 1f       	adc	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	1a f0       	brmi	.+6      	; 0xf70 <__fixunssfsi+0x22>
     f6a:	ba 95       	dec	r27
     f6c:	c9 f7       	brne	.-14     	; 0xf60 <__fixunssfsi+0x12>
     f6e:	12 c0       	rjmp	.+36     	; 0xf94 <__fixunssfsi+0x46>
     f70:	b1 30       	cpi	r27, 0x01	; 1
     f72:	81 f0       	breq	.+32     	; 0xf94 <__fixunssfsi+0x46>
     f74:	5e d0       	rcall	.+188    	; 0x1032 <__fp_zero>
     f76:	b1 e0       	ldi	r27, 0x01	; 1
     f78:	08 95       	ret
     f7a:	5b c0       	rjmp	.+182    	; 0x1032 <__fp_zero>
     f7c:	67 2f       	mov	r22, r23
     f7e:	78 2f       	mov	r23, r24
     f80:	88 27       	eor	r24, r24
     f82:	b8 5f       	subi	r27, 0xF8	; 248
     f84:	39 f0       	breq	.+14     	; 0xf94 <__fixunssfsi+0x46>
     f86:	b9 3f       	cpi	r27, 0xF9	; 249
     f88:	cc f3       	brlt	.-14     	; 0xf7c <__fixunssfsi+0x2e>
     f8a:	86 95       	lsr	r24
     f8c:	77 95       	ror	r23
     f8e:	67 95       	ror	r22
     f90:	b3 95       	inc	r27
     f92:	d9 f7       	brne	.-10     	; 0xf8a <__fixunssfsi+0x3c>
     f94:	3e f4       	brtc	.+14     	; 0xfa4 <__fixunssfsi+0x56>
     f96:	90 95       	com	r25
     f98:	80 95       	com	r24
     f9a:	70 95       	com	r23
     f9c:	61 95       	neg	r22
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	8f 4f       	sbci	r24, 0xFF	; 255
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	08 95       	ret

00000fa6 <__fp_cmp>:
     fa6:	99 0f       	add	r25, r25
     fa8:	00 08       	sbc	r0, r0
     faa:	55 0f       	add	r21, r21
     fac:	aa 0b       	sbc	r26, r26
     fae:	e0 e8       	ldi	r30, 0x80	; 128
     fb0:	fe ef       	ldi	r31, 0xFE	; 254
     fb2:	16 16       	cp	r1, r22
     fb4:	17 06       	cpc	r1, r23
     fb6:	e8 07       	cpc	r30, r24
     fb8:	f9 07       	cpc	r31, r25
     fba:	c0 f0       	brcs	.+48     	; 0xfec <__fp_cmp+0x46>
     fbc:	12 16       	cp	r1, r18
     fbe:	13 06       	cpc	r1, r19
     fc0:	e4 07       	cpc	r30, r20
     fc2:	f5 07       	cpc	r31, r21
     fc4:	98 f0       	brcs	.+38     	; 0xfec <__fp_cmp+0x46>
     fc6:	62 1b       	sub	r22, r18
     fc8:	73 0b       	sbc	r23, r19
     fca:	84 0b       	sbc	r24, r20
     fcc:	95 0b       	sbc	r25, r21
     fce:	39 f4       	brne	.+14     	; 0xfde <__fp_cmp+0x38>
     fd0:	0a 26       	eor	r0, r26
     fd2:	61 f0       	breq	.+24     	; 0xfec <__fp_cmp+0x46>
     fd4:	23 2b       	or	r18, r19
     fd6:	24 2b       	or	r18, r20
     fd8:	25 2b       	or	r18, r21
     fda:	21 f4       	brne	.+8      	; 0xfe4 <__fp_cmp+0x3e>
     fdc:	08 95       	ret
     fde:	0a 26       	eor	r0, r26
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <__fp_cmp+0x3e>
     fe2:	a1 40       	sbci	r26, 0x01	; 1
     fe4:	a6 95       	lsr	r26
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	81 1d       	adc	r24, r1
     fea:	81 1d       	adc	r24, r1
     fec:	08 95       	ret

00000fee <__fp_split3>:
     fee:	57 fd       	sbrc	r21, 7
     ff0:	90 58       	subi	r25, 0x80	; 128
     ff2:	44 0f       	add	r20, r20
     ff4:	55 1f       	adc	r21, r21
     ff6:	59 f0       	breq	.+22     	; 0x100e <__fp_splitA+0x10>
     ff8:	5f 3f       	cpi	r21, 0xFF	; 255
     ffa:	71 f0       	breq	.+28     	; 0x1018 <__fp_splitA+0x1a>
     ffc:	47 95       	ror	r20

00000ffe <__fp_splitA>:
     ffe:	88 0f       	add	r24, r24
    1000:	97 fb       	bst	r25, 7
    1002:	99 1f       	adc	r25, r25
    1004:	61 f0       	breq	.+24     	; 0x101e <__fp_splitA+0x20>
    1006:	9f 3f       	cpi	r25, 0xFF	; 255
    1008:	79 f0       	breq	.+30     	; 0x1028 <__fp_splitA+0x2a>
    100a:	87 95       	ror	r24
    100c:	08 95       	ret
    100e:	12 16       	cp	r1, r18
    1010:	13 06       	cpc	r1, r19
    1012:	14 06       	cpc	r1, r20
    1014:	55 1f       	adc	r21, r21
    1016:	f2 cf       	rjmp	.-28     	; 0xffc <__fp_split3+0xe>
    1018:	46 95       	lsr	r20
    101a:	f1 df       	rcall	.-30     	; 0xffe <__fp_splitA>
    101c:	08 c0       	rjmp	.+16     	; 0x102e <__fp_splitA+0x30>
    101e:	16 16       	cp	r1, r22
    1020:	17 06       	cpc	r1, r23
    1022:	18 06       	cpc	r1, r24
    1024:	99 1f       	adc	r25, r25
    1026:	f1 cf       	rjmp	.-30     	; 0x100a <__fp_splitA+0xc>
    1028:	86 95       	lsr	r24
    102a:	71 05       	cpc	r23, r1
    102c:	61 05       	cpc	r22, r1
    102e:	08 94       	sec
    1030:	08 95       	ret

00001032 <__fp_zero>:
    1032:	e8 94       	clt

00001034 <__fp_szero>:
    1034:	bb 27       	eor	r27, r27
    1036:	66 27       	eor	r22, r22
    1038:	77 27       	eor	r23, r23
    103a:	cb 01       	movw	r24, r22
    103c:	97 f9       	bld	r25, 7
    103e:	08 95       	ret

00001040 <__gesf2>:
    1040:	b2 df       	rcall	.-156    	; 0xfa6 <__fp_cmp>
    1042:	08 f4       	brcc	.+2      	; 0x1046 <__gesf2+0x6>
    1044:	8f ef       	ldi	r24, 0xFF	; 255
    1046:	08 95       	ret

00001048 <__mulsf3>:
    1048:	0b d0       	rcall	.+22     	; 0x1060 <__mulsf3x>
    104a:	78 c0       	rjmp	.+240    	; 0x113c <__fp_round>
    104c:	69 d0       	rcall	.+210    	; 0x1120 <__fp_pscA>
    104e:	28 f0       	brcs	.+10     	; 0x105a <__mulsf3+0x12>
    1050:	6e d0       	rcall	.+220    	; 0x112e <__fp_pscB>
    1052:	18 f0       	brcs	.+6      	; 0x105a <__mulsf3+0x12>
    1054:	95 23       	and	r25, r21
    1056:	09 f0       	breq	.+2      	; 0x105a <__mulsf3+0x12>
    1058:	5a c0       	rjmp	.+180    	; 0x110e <__fp_inf>
    105a:	5f c0       	rjmp	.+190    	; 0x111a <__fp_nan>
    105c:	11 24       	eor	r1, r1
    105e:	ea cf       	rjmp	.-44     	; 0x1034 <__fp_szero>

00001060 <__mulsf3x>:
    1060:	c6 df       	rcall	.-116    	; 0xfee <__fp_split3>
    1062:	a0 f3       	brcs	.-24     	; 0x104c <__mulsf3+0x4>

00001064 <__mulsf3_pse>:
    1064:	95 9f       	mul	r25, r21
    1066:	d1 f3       	breq	.-12     	; 0x105c <__mulsf3+0x14>
    1068:	95 0f       	add	r25, r21
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	55 1f       	adc	r21, r21
    106e:	62 9f       	mul	r22, r18
    1070:	f0 01       	movw	r30, r0
    1072:	72 9f       	mul	r23, r18
    1074:	bb 27       	eor	r27, r27
    1076:	f0 0d       	add	r31, r0
    1078:	b1 1d       	adc	r27, r1
    107a:	63 9f       	mul	r22, r19
    107c:	aa 27       	eor	r26, r26
    107e:	f0 0d       	add	r31, r0
    1080:	b1 1d       	adc	r27, r1
    1082:	aa 1f       	adc	r26, r26
    1084:	64 9f       	mul	r22, r20
    1086:	66 27       	eor	r22, r22
    1088:	b0 0d       	add	r27, r0
    108a:	a1 1d       	adc	r26, r1
    108c:	66 1f       	adc	r22, r22
    108e:	82 9f       	mul	r24, r18
    1090:	22 27       	eor	r18, r18
    1092:	b0 0d       	add	r27, r0
    1094:	a1 1d       	adc	r26, r1
    1096:	62 1f       	adc	r22, r18
    1098:	73 9f       	mul	r23, r19
    109a:	b0 0d       	add	r27, r0
    109c:	a1 1d       	adc	r26, r1
    109e:	62 1f       	adc	r22, r18
    10a0:	83 9f       	mul	r24, r19
    10a2:	a0 0d       	add	r26, r0
    10a4:	61 1d       	adc	r22, r1
    10a6:	22 1f       	adc	r18, r18
    10a8:	74 9f       	mul	r23, r20
    10aa:	33 27       	eor	r19, r19
    10ac:	a0 0d       	add	r26, r0
    10ae:	61 1d       	adc	r22, r1
    10b0:	23 1f       	adc	r18, r19
    10b2:	84 9f       	mul	r24, r20
    10b4:	60 0d       	add	r22, r0
    10b6:	21 1d       	adc	r18, r1
    10b8:	82 2f       	mov	r24, r18
    10ba:	76 2f       	mov	r23, r22
    10bc:	6a 2f       	mov	r22, r26
    10be:	11 24       	eor	r1, r1
    10c0:	9f 57       	subi	r25, 0x7F	; 127
    10c2:	50 40       	sbci	r21, 0x00	; 0
    10c4:	8a f0       	brmi	.+34     	; 0x10e8 <__mulsf3_pse+0x84>
    10c6:	e1 f0       	breq	.+56     	; 0x1100 <__mulsf3_pse+0x9c>
    10c8:	88 23       	and	r24, r24
    10ca:	4a f0       	brmi	.+18     	; 0x10de <__mulsf3_pse+0x7a>
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	bb 1f       	adc	r27, r27
    10d2:	66 1f       	adc	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	91 50       	subi	r25, 0x01	; 1
    10da:	50 40       	sbci	r21, 0x00	; 0
    10dc:	a9 f7       	brne	.-22     	; 0x10c8 <__mulsf3_pse+0x64>
    10de:	9e 3f       	cpi	r25, 0xFE	; 254
    10e0:	51 05       	cpc	r21, r1
    10e2:	70 f0       	brcs	.+28     	; 0x1100 <__mulsf3_pse+0x9c>
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <__fp_inf>
    10e6:	a6 cf       	rjmp	.-180    	; 0x1034 <__fp_szero>
    10e8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ea:	ec f3       	brlt	.-6      	; 0x10e6 <__mulsf3_pse+0x82>
    10ec:	98 3e       	cpi	r25, 0xE8	; 232
    10ee:	dc f3       	brlt	.-10     	; 0x10e6 <__mulsf3_pse+0x82>
    10f0:	86 95       	lsr	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b7 95       	ror	r27
    10f8:	f7 95       	ror	r31
    10fa:	e7 95       	ror	r30
    10fc:	9f 5f       	subi	r25, 0xFF	; 255
    10fe:	c1 f7       	brne	.-16     	; 0x10f0 <__mulsf3_pse+0x8c>
    1100:	fe 2b       	or	r31, r30
    1102:	88 0f       	add	r24, r24
    1104:	91 1d       	adc	r25, r1
    1106:	96 95       	lsr	r25
    1108:	87 95       	ror	r24
    110a:	97 f9       	bld	r25, 7
    110c:	08 95       	ret

0000110e <__fp_inf>:
    110e:	97 f9       	bld	r25, 7
    1110:	9f 67       	ori	r25, 0x7F	; 127
    1112:	80 e8       	ldi	r24, 0x80	; 128
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	08 95       	ret

0000111a <__fp_nan>:
    111a:	9f ef       	ldi	r25, 0xFF	; 255
    111c:	80 ec       	ldi	r24, 0xC0	; 192
    111e:	08 95       	ret

00001120 <__fp_pscA>:
    1120:	00 24       	eor	r0, r0
    1122:	0a 94       	dec	r0
    1124:	16 16       	cp	r1, r22
    1126:	17 06       	cpc	r1, r23
    1128:	18 06       	cpc	r1, r24
    112a:	09 06       	cpc	r0, r25
    112c:	08 95       	ret

0000112e <__fp_pscB>:
    112e:	00 24       	eor	r0, r0
    1130:	0a 94       	dec	r0
    1132:	12 16       	cp	r1, r18
    1134:	13 06       	cpc	r1, r19
    1136:	14 06       	cpc	r1, r20
    1138:	05 06       	cpc	r0, r21
    113a:	08 95       	ret

0000113c <__fp_round>:
    113c:	09 2e       	mov	r0, r25
    113e:	03 94       	inc	r0
    1140:	00 0c       	add	r0, r0
    1142:	11 f4       	brne	.+4      	; 0x1148 <__fp_round+0xc>
    1144:	88 23       	and	r24, r24
    1146:	52 f0       	brmi	.+20     	; 0x115c <__fp_round+0x20>
    1148:	bb 0f       	add	r27, r27
    114a:	40 f4       	brcc	.+16     	; 0x115c <__fp_round+0x20>
    114c:	bf 2b       	or	r27, r31
    114e:	11 f4       	brne	.+4      	; 0x1154 <__fp_round+0x18>
    1150:	60 ff       	sbrs	r22, 0
    1152:	04 c0       	rjmp	.+8      	; 0x115c <__fp_round+0x20>
    1154:	6f 5f       	subi	r22, 0xFF	; 255
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	8f 4f       	sbci	r24, 0xFF	; 255
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	08 95       	ret

0000115e <__udivmodqi4>:
    115e:	99 1b       	sub	r25, r25
    1160:	79 e0       	ldi	r23, 0x09	; 9
    1162:	04 c0       	rjmp	.+8      	; 0x116c <__udivmodqi4_ep>

00001164 <__udivmodqi4_loop>:
    1164:	99 1f       	adc	r25, r25
    1166:	96 17       	cp	r25, r22
    1168:	08 f0       	brcs	.+2      	; 0x116c <__udivmodqi4_ep>
    116a:	96 1b       	sub	r25, r22

0000116c <__udivmodqi4_ep>:
    116c:	88 1f       	adc	r24, r24
    116e:	7a 95       	dec	r23
    1170:	c9 f7       	brne	.-14     	; 0x1164 <__udivmodqi4_loop>
    1172:	80 95       	com	r24
    1174:	08 95       	ret

00001176 <_exit>:
    1176:	f8 94       	cli

00001178 <__stop_program>:
    1178:	ff cf       	rjmp	.-2      	; 0x1178 <__stop_program>
